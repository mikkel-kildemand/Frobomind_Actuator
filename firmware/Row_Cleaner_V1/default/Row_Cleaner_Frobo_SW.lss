
Row_Cleaner_Frobo_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000234  00800100  00800100  0000135a  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000004e9  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b14  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003d9  00000000  00000000  000023b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000e42  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000270  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000479  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fb  00000000  00000000  00003cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_16>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_25>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ee       	ldi	r30, 0xE6	; 230
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 33       	cpi	r26, 0x34	; 52
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 76 06 	call	0xcec	; 0xcec <main>
      ce:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <serial_init>:

/***************************************************************************/
void serial_init(void)
{
	/* enable tx and rx */
	UCSRB_REG = (1<<TXEN_BIT)|(1<<RXEN_BIT);
      d6:	e9 ec       	ldi	r30, 0xC9	; 201
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	88 e1       	ldi	r24, 0x18	; 24
      dc:	80 83       	st	Z, r24

	/* set baud rate */
	UBRRH_REG = (unsigned char) ((UBRR)>>8);
      de:	10 92 cd 00 	sts	0x00CD, r1
	UBRRL_REG = (unsigned char) (UBRR); /* remember the ()! */
      e2:	80 e1       	ldi	r24, 0x10	; 16
      e4:	80 93 cc 00 	sts	0x00CC, r24

	/* asynchronous 8N1 */
	UCSRC_REG = (1<<UCSZ0_BIT)|(1<<UCSZ1_BIT);
      e8:	86 e0       	ldi	r24, 0x06	; 6
      ea:	80 93 ca 00 	sts	0x00CA, r24
#ifdef DOUBLE_SPEED_MODE
	UCSRA_REG |= U2X_BIT;
#endif

	/* init rx  */
	UCSRB_REG |= (1 << RXCIE_BIT);
      ee:	80 81       	ld	r24, Z
      f0:	80 68       	ori	r24, 0x80	; 128
      f2:	80 83       	st	Z, r24
	ib_head = 0;
      f4:	10 92 55 01 	sts	0x0155, r1
      f8:	10 92 54 01 	sts	0x0154, r1
	ib_tail = 0;
      fc:	10 92 02 01 	sts	0x0102, r1
     100:	10 92 01 01 	sts	0x0101, r1

	/* init tx */
	ob_head = 0;
     104:	10 92 a9 01 	sts	0x01A9, r1
     108:	10 92 a8 01 	sts	0x01A8, r1
	ob_tail = 0;
     10c:	10 92 57 01 	sts	0x0157, r1
     110:	10 92 56 01 	sts	0x0156, r1
	tx_busy = FALSE;
     114:	10 92 53 01 	sts	0x0153, r1
}
     118:	08 95       	ret

0000011a <__vector_32>:
	ISR (USART0_RX_vect)
#endif
#ifdef USART_1
	ISR (USART1_RX_vect)
#endif
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	0b b6       	in	r0, 0x3b	; 59
     124:	0f 92       	push	r0
     126:	11 24       	eor	r1, r1
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
     12c:	ef 93       	push	r30
     12e:	ff 93       	push	r31
	ib_head++;
     130:	80 91 54 01 	lds	r24, 0x0154
     134:	90 91 55 01 	lds	r25, 0x0155
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	90 93 55 01 	sts	0x0155, r25
     13e:	80 93 54 01 	sts	0x0154, r24
	if (ib_head == IB_MAX)
     142:	80 35       	cpi	r24, 0x50	; 80
     144:	91 05       	cpc	r25, r1
     146:	21 f4       	brne	.+8      	; 0x150 <__vector_32+0x36>
		ib_head = 0;
     148:	10 92 55 01 	sts	0x0155, r1
     14c:	10 92 54 01 	sts	0x0154, r1
	if (ib_head != ib_tail) /* do not add if buffer overrun */
     150:	e0 91 54 01 	lds	r30, 0x0154
     154:	f0 91 55 01 	lds	r31, 0x0155
     158:	80 91 01 01 	lds	r24, 0x0101
     15c:	90 91 02 01 	lds	r25, 0x0102
     160:	e8 17       	cp	r30, r24
     162:	f9 07       	cpc	r31, r25
     164:	29 f0       	breq	.+10     	; 0x170 <__vector_32+0x56>
		ib[ib_head] = UDR_REG;
     166:	80 91 ce 00 	lds	r24, 0x00CE
     16a:	ed 5f       	subi	r30, 0xFD	; 253
     16c:	fe 4f       	sbci	r31, 0xFE	; 254
     16e:	80 83       	st	Z, r24
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	0f 90       	pop	r0
     17a:	0b be       	out	0x3b, r0	; 59
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <__vector_34>:
	ISR (USART0_TX_vect)
#endif
#ifdef USART_1
	ISR (USART1_TX_vect)
#endif
{
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	0b b6       	in	r0, 0x3b	; 59
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	8f 93       	push	r24
     19a:	9f 93       	push	r25
     19c:	ef 93       	push	r30
     19e:	ff 93       	push	r31
	if (ob_head != ob_tail) /* if buffer is not empty */
     1a0:	20 91 56 01 	lds	r18, 0x0156
     1a4:	30 91 57 01 	lds	r19, 0x0157
     1a8:	80 91 a8 01 	lds	r24, 0x01A8
     1ac:	90 91 a9 01 	lds	r25, 0x01A9
     1b0:	82 17       	cp	r24, r18
     1b2:	93 07       	cpc	r25, r19
     1b4:	b9 f0       	breq	.+46     	; 0x1e4 <__vector_34+0x5e>
	{
		ob_tail++; /* increment the buffer tail */ 
     1b6:	c9 01       	movw	r24, r18
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	90 93 57 01 	sts	0x0157, r25
     1be:	80 93 56 01 	sts	0x0156, r24
		if (ob_tail == OB_MAX)
     1c2:	80 35       	cpi	r24, 0x50	; 80
     1c4:	91 05       	cpc	r25, r1
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <__vector_34+0x4a>
			ob_tail = 0;
     1c8:	10 92 57 01 	sts	0x0157, r1
     1cc:	10 92 56 01 	sts	0x0156, r1
		UDR_REG = ob[ob_tail]; /* send the char */
     1d0:	e0 91 56 01 	lds	r30, 0x0156
     1d4:	f0 91 57 01 	lds	r31, 0x0157
     1d8:	e8 5a       	subi	r30, 0xA8	; 168
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	80 81       	ld	r24, Z
     1de:	80 93 ce 00 	sts	0x00CE, r24
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__vector_34+0x6c>
	}
	else
	{
		UCSRB_REG &= ~(1<<TXCIE_BIT); /* disable tx interrupt */
     1e4:	80 91 c9 00 	lds	r24, 0x00C9
     1e8:	8f 7b       	andi	r24, 0xBF	; 191
     1ea:	80 93 c9 00 	sts	0x00C9, r24
		tx_busy = FALSE;
     1ee:	10 92 53 01 	sts	0x0153, r1
	}
}
     1f2:	ff 91       	pop	r31
     1f4:	ef 91       	pop	r30
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	3f 91       	pop	r19
     1fc:	2f 91       	pop	r18
     1fe:	0f 90       	pop	r0
     200:	0b be       	out	0x3b, r0	; 59
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <serial_tx_init>:
/***************************************************************************/
void serial_tx_init ()
{
	if (ob_head != ob_tail) /* if buffer is not empty */
     20c:	20 91 56 01 	lds	r18, 0x0156
     210:	30 91 57 01 	lds	r19, 0x0157
     214:	80 91 a8 01 	lds	r24, 0x01A8
     218:	90 91 a9 01 	lds	r25, 0x01A9
     21c:	82 17       	cp	r24, r18
     21e:	93 07       	cpc	r25, r19
     220:	f1 f0       	breq	.+60     	; 0x25e <serial_tx_init+0x52>
	{
		tx_busy = TRUE;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	80 93 53 01 	sts	0x0153, r24
		UCSRB_REG |= (1 << TXCIE_BIT); /* enable tx interrupt */
     228:	80 91 c9 00 	lds	r24, 0x00C9
     22c:	80 64       	ori	r24, 0x40	; 64
     22e:	80 93 c9 00 	sts	0x00C9, r24

		ob_tail++; /* increment the buffer tail */ 
     232:	c9 01       	movw	r24, r18
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	90 93 57 01 	sts	0x0157, r25
     23a:	80 93 56 01 	sts	0x0156, r24
		if (ob_tail == OB_MAX)
     23e:	80 35       	cpi	r24, 0x50	; 80
     240:	91 05       	cpc	r25, r1
     242:	21 f4       	brne	.+8      	; 0x24c <serial_tx_init+0x40>
			ob_tail = 0;
     244:	10 92 57 01 	sts	0x0157, r1
     248:	10 92 56 01 	sts	0x0156, r1
		UDR_REG = ob[ob_tail]; /* send the char */
     24c:	e0 91 56 01 	lds	r30, 0x0156
     250:	f0 91 57 01 	lds	r31, 0x0157
     254:	e8 5a       	subi	r30, 0xA8	; 168
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	80 81       	ld	r24, Z
     25a:	80 93 ce 00 	sts	0x00CE, r24
     25e:	08 95       	ret

00000260 <serial_tx>:
	}
}
/***************************************************************************/
void serial_tx (unsigned char c)
{
     260:	28 2f       	mov	r18, r24
	ob_head++;
     262:	80 91 a8 01 	lds	r24, 0x01A8
     266:	90 91 a9 01 	lds	r25, 0x01A9
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 a9 01 	sts	0x01A9, r25
     270:	80 93 a8 01 	sts	0x01A8, r24
	if (ob_head == OB_MAX)
     274:	80 35       	cpi	r24, 0x50	; 80
     276:	91 05       	cpc	r25, r1
     278:	21 f4       	brne	.+8      	; 0x282 <serial_tx+0x22>
		ob_head = 0;
     27a:	10 92 a9 01 	sts	0x01A9, r1
     27e:	10 92 a8 01 	sts	0x01A8, r1
	if (ob_head != ob_tail) /* do not add if buffer overrun */
     282:	e0 91 a8 01 	lds	r30, 0x01A8
     286:	f0 91 a9 01 	lds	r31, 0x01A9
     28a:	80 91 56 01 	lds	r24, 0x0156
     28e:	90 91 57 01 	lds	r25, 0x0157
     292:	e8 17       	cp	r30, r24
     294:	f9 07       	cpc	r31, r25
     296:	19 f0       	breq	.+6      	; 0x29e <serial_tx+0x3e>
		ob[ob_head] = c;
     298:	e8 5a       	subi	r30, 0xA8	; 168
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	20 83       	st	Z, r18

	if (tx_busy == FALSE)
     29e:	80 91 53 01 	lds	r24, 0x0153
     2a2:	88 23       	and	r24, r24
     2a4:	11 f4       	brne	.+4      	; 0x2aa <serial_tx+0x4a>
		serial_tx_init();
     2a6:	0e 94 06 01 	call	0x20c	; 0x20c <serial_tx_init>
     2aa:	08 95       	ret

000002ac <serial_tx_direct>:
}
/***************************************************************************/
void serial_tx_direct (unsigned char c)
{
     2ac:	98 2f       	mov	r25, r24
	/* wait for an empty transmit buffer */
	while ( !(UCSRA_REG & (1<<UDRE_BIT))) /* check Data Register Empty bit */
     2ae:	80 91 c8 00 	lds	r24, 0x00C8
     2b2:	85 ff       	sbrs	r24, 5
     2b4:	fc cf       	rjmp	.-8      	; 0x2ae <serial_tx_direct+0x2>
		;
	UDR_REG = c; /* fill Data Register */
     2b6:	90 93 ce 00 	sts	0x00CE, r25
}
     2ba:	08 95       	ret

000002bc <serial_tx_string>:
/***************************************************************************/
void serial_tx_string (char *s)
{
     2bc:	dc 01       	movw	r26, r24
     2be:	29 c0       	rjmp	.+82     	; 0x312 <serial_tx_string+0x56>
	char err = 0;

	while (err == 0 && *s != 0)
	{
		ob_head++;
     2c0:	80 91 a8 01 	lds	r24, 0x01A8
     2c4:	90 91 a9 01 	lds	r25, 0x01A9
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 a9 01 	sts	0x01A9, r25
     2ce:	80 93 a8 01 	sts	0x01A8, r24
		if (ob_head == OB_MAX)
     2d2:	80 35       	cpi	r24, 0x50	; 80
     2d4:	91 05       	cpc	r25, r1
     2d6:	21 f4       	brne	.+8      	; 0x2e0 <serial_tx_string+0x24>
			ob_head = 0;
     2d8:	10 92 a9 01 	sts	0x01A9, r1
     2dc:	10 92 a8 01 	sts	0x01A8, r1
		if (ob_head != ob_tail) /* do not add if buffer overrun */
     2e0:	e0 91 a8 01 	lds	r30, 0x01A8
     2e4:	f0 91 a9 01 	lds	r31, 0x01A9
     2e8:	80 91 56 01 	lds	r24, 0x0156
     2ec:	90 91 57 01 	lds	r25, 0x0157
     2f0:	e8 17       	cp	r30, r24
     2f2:	f9 07       	cpc	r31, r25
     2f4:	29 f0       	breq	.+10     	; 0x300 <serial_tx_string+0x44>
			ob[ob_head] = *s;
     2f6:	e8 5a       	subi	r30, 0xA8	; 168
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	8d 91       	ld	r24, X+
     2fc:	80 83       	st	Z, r24
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <serial_tx_string+0x56>
		else
		{
			err = 1;
			ob_head = 0;
     300:	10 92 a9 01 	sts	0x01A9, r1
     304:	10 92 a8 01 	sts	0x01A8, r1
			ob_tail = 0;
     308:	10 92 57 01 	sts	0x0157, r1
     30c:	10 92 56 01 	sts	0x0156, r1
     310:	03 c0       	rjmp	.+6      	; 0x318 <serial_tx_string+0x5c>
/***************************************************************************/
void serial_tx_string (char *s)
{
	char err = 0;

	while (err == 0 && *s != 0)
     312:	8c 91       	ld	r24, X
     314:	88 23       	and	r24, r24
     316:	a1 f6       	brne	.-88     	; 0x2c0 <serial_tx_string+0x4>
			ob_tail = 0;
		}
		s++; /* go to next char in s */
	}

	if (tx_busy == FALSE)
     318:	80 91 53 01 	lds	r24, 0x0153
     31c:	88 23       	and	r24, r24
     31e:	11 f4       	brne	.+4      	; 0x324 <serial_tx_string+0x68>
		serial_tx_init();
     320:	0e 94 06 01 	call	0x20c	; 0x20c <serial_tx_init>
     324:	08 95       	ret

00000326 <serial_tx_idle>:
}
/***************************************************************************/
unsigned char serial_tx_idle (void)
{
	/* test if no transmission is in progress */
	return (UCSRA_REG & (1<<TXC_BIT)); /* check Transmit Complete bit */
     326:	80 91 c8 00 	lds	r24, 0x00C8
}
     32a:	80 74       	andi	r24, 0x40	; 64
     32c:	08 95       	ret

0000032e <serial_rx_avail>:
/***************************************************************************/
unsigned char serial_rx_avail (void)
{
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	20 91 54 01 	lds	r18, 0x0154
     334:	30 91 55 01 	lds	r19, 0x0155
     338:	80 91 01 01 	lds	r24, 0x0101
     33c:	90 91 02 01 	lds	r25, 0x0102
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	09 f0       	breq	.+2      	; 0x348 <serial_rx_avail+0x1a>
     346:	41 e0       	ldi	r20, 0x01	; 1
	/* return true if there is a character in the input buffer */
	return (ib_head != ib_tail); 
}
     348:	84 2f       	mov	r24, r20
     34a:	08 95       	ret

0000034c <serial_rx>:
/***************************************************************************/
unsigned char serial_rx (void)
{
	/* return next char in buffer */
	ib_tail++;
     34c:	80 91 01 01 	lds	r24, 0x0101
     350:	90 91 02 01 	lds	r25, 0x0102
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	90 93 02 01 	sts	0x0102, r25
     35a:	80 93 01 01 	sts	0x0101, r24
	if (ib_tail == IB_MAX)
     35e:	80 35       	cpi	r24, 0x50	; 80
     360:	91 05       	cpc	r25, r1
     362:	21 f4       	brne	.+8      	; 0x36c <serial_rx+0x20>
		ib_tail = 0;
     364:	10 92 02 01 	sts	0x0102, r1
     368:	10 92 01 01 	sts	0x0101, r1
     36c:	e0 91 01 01 	lds	r30, 0x0101
     370:	f0 91 02 01 	lds	r31, 0x0102
     374:	ed 5f       	subi	r30, 0xFD	; 253
     376:	fe 4f       	sbci	r31, 0xFE	; 254
	return (ib[ib_tail]);
}
     378:	80 81       	ld	r24, Z
     37a:	08 95       	ret

0000037c <serial_rx_flush>:
/***************************************************************************/
void serial_rx_flush (void)
{
     37c:	02 c0       	rjmp	.+4      	; 0x382 <serial_rx_flush+0x6>
	unsigned char c;
	while (UCSRA_REG & (1<<RXC_BIT))
		c = UDR_REG;
     37e:	80 91 ce 00 	lds	r24, 0x00CE
}
/***************************************************************************/
void serial_rx_flush (void)
{
	unsigned char c;
	while (UCSRA_REG & (1<<RXC_BIT))
     382:	80 91 c8 00 	lds	r24, 0x00C8
     386:	87 fd       	sbrc	r24, 7
     388:	fa cf       	rjmp	.-12     	; 0x37e <serial_rx_flush+0x2>
		c = UDR_REG;
}
     38a:	08 95       	ret

0000038c <sched_init>:

/***************************************************************************/
void sched_init(void)
{
	/* timer 0 interrupt init (each 1ms) */
	t1ms = 0;
     38c:	10 92 bd 01 	sts	0x01BD, r1
	t1ms_cnt = 0;
     390:	10 92 ab 01 	sts	0x01AB, r1
     394:	10 92 aa 01 	sts	0x01AA, r1
    TIMSK0 = BV(OCIE0A); 
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	80 93 6e 00 	sts	0x006E, r24
    TCCR0A = BV(CS00) | BV(CS01) | BV(WGM01); /* clk/64, TOS is defined as OCR0A */  
     39e:	8b e0       	ldi	r24, 0x0B	; 11
     3a0:	84 bd       	out	0x24, r24	; 36
    OCR0A = INT0_CNT_TOP;
     3a2:	89 ef       	ldi	r24, 0xF9	; 249
     3a4:	87 bd       	out	0x27, r24	; 39
	/* PB_OUT (FLIPBIT_DDR, FLIPBIT); */ /* set 1ms flipbit as output */
}
     3a6:	08 95       	ret

000003a8 <__vector_16>:
/***************************************************************************/
/*ISR(SIG_OUTPUT_COMPARE0A) */
ISR (TIMER0_COMP_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 93       	push	r24
	t1ms++;
     3b4:	80 91 bd 01 	lds	r24, 0x01BD
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	80 93 bd 01 	sts	0x01BD, r24
	/* PB_FLIP (FLIPBIT_PORT, FLIPBIT); */ /* time to flip the flip bit */
}
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_25>:
/***************************************************************************/
/* ADC interrupt handler */
ISR (ADC_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	0b b6       	in	r0, 0x3b	; 59
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	2f 93       	push	r18
     3da:	3f 93       	push	r19
     3dc:	4f 93       	push	r20
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
	adc_data[adc_ch] = ((ADCL) | ((ADCH)<<8)); /* read value */
     3e6:	e0 91 c7 01 	lds	r30, 0x01C7
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	20 91 78 00 	lds	r18, 0x0078
     3f0:	40 91 79 00 	lds	r20, 0x0079
     3f4:	94 2f       	mov	r25, r20
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	82 2b       	or	r24, r18
     3fc:	93 2b       	or	r25, r19
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	ee 52       	subi	r30, 0x2E	; 46
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	91 83       	std	Z+1, r25	; 0x01
     408:	80 83       	st	Z, r24
	if (++adc_ch >= ADC_NUM) /* go to next adc channel */
     40a:	80 91 c7 01 	lds	r24, 0x01C7
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 c7 01 	sts	0x01C7, r24
     414:	80 91 c7 01 	lds	r24, 0x01C7
     418:	83 30       	cpi	r24, 0x03	; 3
     41a:	10 f0       	brcs	.+4      	; 0x420 <__vector_25+0x56>
		adc_ch = 0;
     41c:	10 92 c7 01 	sts	0x01C7, r1
	ADMUX = (1<<REFS0) | adc_ports[adc_ch];
     420:	e0 91 c7 01 	lds	r30, 0x01C7
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e8 53       	subi	r30, 0x38	; 56
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	80 81       	ld	r24, Z
     42c:	80 64       	ori	r24, 0x40	; 64
     42e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);  /* request a new adc conversion */
     432:	80 91 7a 00 	lds	r24, 0x007A
     436:	80 64       	ori	r24, 0x40	; 64
     438:	80 93 7a 00 	sts	0x007A, r24
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0b be       	out	0x3b, r0	; 59
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <actuator_init>:
/***************************************************************************/
/* Setup of port used for the Actuator */
void actuator_init (void)
{
	DDRE = 	0b01111000;  //Pin 3, 4, 5 and 6 of PORTE declared as output
     458:	88 e7       	ldi	r24, 0x78	; 120
     45a:	8d b9       	out	0x0d, r24	; 13
	PORTE= 	0x00;			//No pullup	
     45c:	1e b8       	out	0x0e, r1	; 14
	DDRA = 	0b00000000;  //Pin 0, 2, 3 and 4 of PORTA declared as input
     45e:	11 b8       	out	0x01, r1	; 1
	PORTA= 	0x00;			//No pullup
     460:	12 b8       	out	0x02, r1	; 2
}
     462:	08 95       	ret

00000464 <actuator_controll>:
/***************************************************************************/
void actuator_controll(void)
{
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
//			next_act_state =4;			//force in fault state
	target = ((((ACTUATOR_MAX - ACTUATOR_MIN) * dist) / 100) + ACTUATOR_MIN);
     46c:	60 91 bf 01 	lds	r22, 0x01BF
     470:	70 91 c0 01 	lds	r23, 0x01C0
     474:	80 91 c1 01 	lds	r24, 0x01C1
     478:	90 91 c2 01 	lds	r25, 0x01C2
     47c:	23 e9       	ldi	r18, 0x93	; 147
     47e:	33 e0       	ldi	r19, 0x03	; 3
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	0e 94 af 08 	call	0x115e	; 0x115e <__mulsi3>
     488:	24 e6       	ldi	r18, 0x64	; 100
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__udivmodsi4>
     494:	2f 5b       	subi	r18, 0xBF	; 191
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	4f 4f       	sbci	r20, 0xFF	; 255
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	20 93 e4 01 	sts	0x01E4, r18
     4a0:	30 93 e5 01 	sts	0x01E5, r19
     4a4:	40 93 e6 01 	sts	0x01E6, r20
     4a8:	50 93 e7 01 	sts	0x01E7, r21
     4ac:	10 92 e8 01 	sts	0x01E8, r1
     4b0:	10 92 e9 01 	sts	0x01E9, r1
     4b4:	10 92 ea 01 	sts	0x01EA, r1
     4b8:	10 92 eb 01 	sts	0x01EB, r1

	if (((PINA & 0x0F) != 0x00) & (act_reset == false))
     4bc:	80 b1       	in	r24, 0x00	; 0
     4be:	20 91 dd 01 	lds	r18, 0x01DD
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	8f 70       	andi	r24, 0x0F	; 15
     4c6:	90 70       	andi	r25, 0x00	; 0
     4c8:	89 2b       	or	r24, r25
     4ca:	29 f0       	breq	.+10     	; 0x4d6 <actuator_controll+0x72>
     4cc:	22 23       	and	r18, r18
     4ce:	19 f4       	brne	.+6      	; 0x4d6 <actuator_controll+0x72>
		
		next_act_state =4;
     4d0:	84 e0       	ldi	r24, 0x04	; 4
     4d2:	80 93 d8 01 	sts	0x01D8, r24

	switch (next_act_state)
     4d6:	20 91 d8 01 	lds	r18, 0x01D8
     4da:	23 30       	cpi	r18, 0x03	; 3
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <actuator_controll+0x7c>
     4de:	d2 c0       	rjmp	.+420    	; 0x684 <actuator_controll+0x220>
     4e0:	24 30       	cpi	r18, 0x04	; 4
     4e2:	30 f4       	brcc	.+12     	; 0x4f0 <actuator_controll+0x8c>
     4e4:	21 30       	cpi	r18, 0x01	; 1
     4e6:	59 f0       	breq	.+22     	; 0x4fe <actuator_controll+0x9a>
     4e8:	22 30       	cpi	r18, 0x02	; 2
     4ea:	09 f0       	breq	.+2      	; 0x4ee <actuator_controll+0x8a>
     4ec:	8b c1       	rjmp	.+790    	; 0x804 <actuator_controll+0x3a0>
     4ee:	68 c0       	rjmp	.+208    	; 0x5c0 <actuator_controll+0x15c>
     4f0:	24 30       	cpi	r18, 0x04	; 4
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <actuator_controll+0x92>
     4f4:	5b c1       	rjmp	.+694    	; 0x7ac <actuator_controll+0x348>
     4f6:	25 30       	cpi	r18, 0x05	; 5
     4f8:	09 f0       	breq	.+2      	; 0x4fc <actuator_controll+0x98>
     4fa:	84 c1       	rjmp	.+776    	; 0x804 <actuator_controll+0x3a0>
     4fc:	68 c1       	rjmp	.+720    	; 0x7ce <actuator_controll+0x36a>
		{
		case 1:											//Actuator out
			PORTE &= ~(1<<PE3);  						//Pin 3 low State ()
     4fe:	73 98       	cbi	0x0e, 3	; 14
			PORTE |= (1<<PE4);  						//Pin 4 High State
     500:	74 9a       	sbi	0x0e, 4	; 14
			Cnt3 = 0;									//Reset Cnt3, used for making a stop while changing direktion of the actuator
     502:	10 92 b3 01 	sts	0x01B3, r1
     506:	10 92 b2 01 	sts	0x01B2, r1
			actuator_fault_warning = false;
     50a:	10 92 e1 01 	sts	0x01E1, r1
			act_reset = false;
     50e:	10 92 dd 01 	sts	0x01DD, r1
			if ((target) > (height + 0x10))				//If the actuator height is less than dist, set by user via UART.
     512:	e0 90 e4 01 	lds	r14, 0x01E4
     516:	f0 90 e5 01 	lds	r15, 0x01E5
     51a:	00 91 e6 01 	lds	r16, 0x01E6
     51e:	10 91 e7 01 	lds	r17, 0x01E7
     522:	b0 91 e8 01 	lds	r27, 0x01E8
     526:	a0 91 e9 01 	lds	r26, 0x01E9
     52a:	f0 91 ea 01 	lds	r31, 0x01EA
     52e:	e0 91 eb 01 	lds	r30, 0x01EB
     532:	80 91 e2 01 	lds	r24, 0x01E2
     536:	90 91 e3 01 	lds	r25, 0x01E3
     53a:	40 96       	adiw	r24, 0x10	; 16
     53c:	9c 01       	movw	r18, r24
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9e 17       	cp	r25, r30
     54c:	08 f4       	brcc	.+2      	; 0x550 <actuator_controll+0xec>
     54e:	ee c0       	rjmp	.+476    	; 0x72c <actuator_controll+0x2c8>
     550:	e9 17       	cp	r30, r25
     552:	09 f5       	brne	.+66     	; 0x596 <actuator_controll+0x132>
     554:	8f 17       	cp	r24, r31
     556:	08 f4       	brcc	.+2      	; 0x55a <actuator_controll+0xf6>
     558:	e9 c0       	rjmp	.+466    	; 0x72c <actuator_controll+0x2c8>
     55a:	f8 17       	cp	r31, r24
     55c:	e1 f4       	brne	.+56     	; 0x596 <actuator_controll+0x132>
     55e:	7a 17       	cp	r23, r26
     560:	08 f4       	brcc	.+2      	; 0x564 <actuator_controll+0x100>
     562:	e4 c0       	rjmp	.+456    	; 0x72c <actuator_controll+0x2c8>
     564:	a7 17       	cp	r26, r23
     566:	b9 f4       	brne	.+46     	; 0x596 <actuator_controll+0x132>
     568:	6b 17       	cp	r22, r27
     56a:	08 f4       	brcc	.+2      	; 0x56e <actuator_controll+0x10a>
     56c:	df c0       	rjmp	.+446    	; 0x72c <actuator_controll+0x2c8>
     56e:	b6 17       	cp	r27, r22
     570:	91 f4       	brne	.+36     	; 0x596 <actuator_controll+0x132>
     572:	51 17       	cp	r21, r17
     574:	08 f4       	brcc	.+2      	; 0x578 <actuator_controll+0x114>
     576:	da c0       	rjmp	.+436    	; 0x72c <actuator_controll+0x2c8>
     578:	15 17       	cp	r17, r21
     57a:	69 f4       	brne	.+26     	; 0x596 <actuator_controll+0x132>
     57c:	40 17       	cp	r20, r16
     57e:	08 f4       	brcc	.+2      	; 0x582 <actuator_controll+0x11e>
     580:	d5 c0       	rjmp	.+426    	; 0x72c <actuator_controll+0x2c8>
     582:	04 17       	cp	r16, r20
     584:	41 f4       	brne	.+16     	; 0x596 <actuator_controll+0x132>
     586:	3f 15       	cp	r19, r15
     588:	08 f4       	brcc	.+2      	; 0x58c <actuator_controll+0x128>
     58a:	d0 c0       	rjmp	.+416    	; 0x72c <actuator_controll+0x2c8>
     58c:	f3 16       	cp	r15, r19
     58e:	19 f4       	brne	.+6      	; 0x596 <actuator_controll+0x132>
     590:	2e 15       	cp	r18, r14
     592:	08 f4       	brcc	.+2      	; 0x596 <actuator_controll+0x132>
     594:	cb c0       	rjmp	.+406    	; 0x72c <actuator_controll+0x2c8>
				next_act_state = 1;						//Actuator out
			else if	((target) < (height - 0x10))		//If the lengh of actuatur is within the aproved window.
     596:	e0 90 e4 01 	lds	r14, 0x01E4
     59a:	f0 90 e5 01 	lds	r15, 0x01E5
     59e:	00 91 e6 01 	lds	r16, 0x01E6
     5a2:	10 91 e7 01 	lds	r17, 0x01E7
     5a6:	f0 91 e8 01 	lds	r31, 0x01E8
     5aa:	e0 91 e9 01 	lds	r30, 0x01E9
     5ae:	30 91 ea 01 	lds	r19, 0x01EA
     5b2:	20 91 eb 01 	lds	r18, 0x01EB
     5b6:	80 91 e2 01 	lds	r24, 0x01E2
     5ba:	90 91 e3 01 	lds	r25, 0x01E3
     5be:	24 c1       	rjmp	.+584    	; 0x808 <actuator_controll+0x3a4>
			else
				next_act_state =3;
			break;

		case 2:		//Actuator in
			PORTE |= (1<<PE3);  	//Pin 3 High State
     5c0:	73 9a       	sbi	0x0e, 3	; 14
			PORTE &= ~(1<<PE4);  	//Pin 4 low State ()
     5c2:	74 98       	cbi	0x0e, 4	; 14
			Cnt3 = 0;
     5c4:	10 92 b3 01 	sts	0x01B3, r1
     5c8:	10 92 b2 01 	sts	0x01B2, r1
			actuator_fault_warning = false;
     5cc:	10 92 e1 01 	sts	0x01E1, r1
			act_reset = false;
     5d0:	10 92 dd 01 	sts	0x01DD, r1
			if ((target) > (height + 0x10))
     5d4:	e0 90 e4 01 	lds	r14, 0x01E4
     5d8:	f0 90 e5 01 	lds	r15, 0x01E5
     5dc:	00 91 e6 01 	lds	r16, 0x01E6
     5e0:	10 91 e7 01 	lds	r17, 0x01E7
     5e4:	b0 91 e8 01 	lds	r27, 0x01E8
     5e8:	a0 91 e9 01 	lds	r26, 0x01E9
     5ec:	f0 91 ea 01 	lds	r31, 0x01EA
     5f0:	e0 91 eb 01 	lds	r30, 0x01EB
     5f4:	80 91 e2 01 	lds	r24, 0x01E2
     5f8:	90 91 e3 01 	lds	r25, 0x01E3
     5fc:	40 96       	adiw	r24, 0x10	; 16
     5fe:	9c 01       	movw	r18, r24
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9e 17       	cp	r25, r30
     60e:	08 f4       	brcc	.+2      	; 0x612 <actuator_controll+0x1ae>
     610:	fb c0       	rjmp	.+502    	; 0x808 <actuator_controll+0x3a4>
     612:	e9 17       	cp	r30, r25
     614:	09 f5       	brne	.+66     	; 0x658 <actuator_controll+0x1f4>
     616:	8f 17       	cp	r24, r31
     618:	08 f4       	brcc	.+2      	; 0x61c <actuator_controll+0x1b8>
     61a:	f6 c0       	rjmp	.+492    	; 0x808 <actuator_controll+0x3a4>
     61c:	f8 17       	cp	r31, r24
     61e:	e1 f4       	brne	.+56     	; 0x658 <actuator_controll+0x1f4>
     620:	7a 17       	cp	r23, r26
     622:	08 f4       	brcc	.+2      	; 0x626 <actuator_controll+0x1c2>
     624:	f1 c0       	rjmp	.+482    	; 0x808 <actuator_controll+0x3a4>
     626:	a7 17       	cp	r26, r23
     628:	b9 f4       	brne	.+46     	; 0x658 <actuator_controll+0x1f4>
     62a:	6b 17       	cp	r22, r27
     62c:	08 f4       	brcc	.+2      	; 0x630 <actuator_controll+0x1cc>
     62e:	ec c0       	rjmp	.+472    	; 0x808 <actuator_controll+0x3a4>
     630:	b6 17       	cp	r27, r22
     632:	91 f4       	brne	.+36     	; 0x658 <actuator_controll+0x1f4>
     634:	51 17       	cp	r21, r17
     636:	08 f4       	brcc	.+2      	; 0x63a <actuator_controll+0x1d6>
     638:	e7 c0       	rjmp	.+462    	; 0x808 <actuator_controll+0x3a4>
     63a:	15 17       	cp	r17, r21
     63c:	69 f4       	brne	.+26     	; 0x658 <actuator_controll+0x1f4>
     63e:	40 17       	cp	r20, r16
     640:	08 f4       	brcc	.+2      	; 0x644 <actuator_controll+0x1e0>
     642:	e2 c0       	rjmp	.+452    	; 0x808 <actuator_controll+0x3a4>
     644:	04 17       	cp	r16, r20
     646:	41 f4       	brne	.+16     	; 0x658 <actuator_controll+0x1f4>
     648:	3f 15       	cp	r19, r15
     64a:	08 f4       	brcc	.+2      	; 0x64e <actuator_controll+0x1ea>
     64c:	dd c0       	rjmp	.+442    	; 0x808 <actuator_controll+0x3a4>
     64e:	f3 16       	cp	r15, r19
     650:	19 f4       	brne	.+6      	; 0x658 <actuator_controll+0x1f4>
     652:	2e 15       	cp	r18, r14
     654:	08 f4       	brcc	.+2      	; 0x658 <actuator_controll+0x1f4>
     656:	d8 c0       	rjmp	.+432    	; 0x808 <actuator_controll+0x3a4>
				next_act_state = 3;						//Actuator out
			else if	((target) < (height - 0x10))
     658:	e0 90 e4 01 	lds	r14, 0x01E4
     65c:	f0 90 e5 01 	lds	r15, 0x01E5
     660:	00 91 e6 01 	lds	r16, 0x01E6
     664:	10 91 e7 01 	lds	r17, 0x01E7
     668:	f0 91 e8 01 	lds	r31, 0x01E8
     66c:	e0 91 e9 01 	lds	r30, 0x01E9
     670:	30 91 ea 01 	lds	r19, 0x01EA
     674:	20 91 eb 01 	lds	r18, 0x01EB
     678:	80 91 e2 01 	lds	r24, 0x01E2
     67c:	90 91 e3 01 	lds	r25, 0x01E3
     680:	40 97       	sbiw	r24, 0x10	; 16
     682:	6b c0       	rjmp	.+214    	; 0x75a <actuator_controll+0x2f6>
			else
				next_act_state =3;
			break;

		case 3:		//Actuator in place
			PORTE |= (1<<PE4);  	//Pin 4 High State
     684:	74 9a       	sbi	0x0e, 4	; 14
			PORTE |= (1<<PE3);  	//Pin 3 High State
     686:	73 9a       	sbi	0x0e, 3	; 14
			actuator_fault_warning = false;
     688:	10 92 e1 01 	sts	0x01E1, r1
			act_reset = false;
     68c:	10 92 dd 01 	sts	0x01DD, r1
			Cnt3++;
     690:	80 91 b2 01 	lds	r24, 0x01B2
     694:	90 91 b3 01 	lds	r25, 0x01B3
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 b3 01 	sts	0x01B3, r25
     69e:	80 93 b2 01 	sts	0x01B2, r24
			Cnt4 = 0;
     6a2:	10 92 d0 01 	sts	0x01D0, r1
     6a6:	10 92 cf 01 	sts	0x01CF, r1
			if (Cnt3 > 10)
     6aa:	80 91 b2 01 	lds	r24, 0x01B2
     6ae:	90 91 b3 01 	lds	r25, 0x01B3
     6b2:	0b 97       	sbiw	r24, 0x0b	; 11
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <actuator_controll+0x254>
     6b6:	ab c0       	rjmp	.+342    	; 0x80e <actuator_controll+0x3aa>
			{
				if ((target) > (height + 10))
     6b8:	e0 90 e4 01 	lds	r14, 0x01E4
     6bc:	f0 90 e5 01 	lds	r15, 0x01E5
     6c0:	00 91 e6 01 	lds	r16, 0x01E6
     6c4:	10 91 e7 01 	lds	r17, 0x01E7
     6c8:	b0 91 e8 01 	lds	r27, 0x01E8
     6cc:	a0 91 e9 01 	lds	r26, 0x01E9
     6d0:	f0 91 ea 01 	lds	r31, 0x01EA
     6d4:	e0 91 eb 01 	lds	r30, 0x01EB
     6d8:	80 91 e2 01 	lds	r24, 0x01E2
     6dc:	90 91 e3 01 	lds	r25, 0x01E3
     6e0:	0a 96       	adiw	r24, 0x0a	; 10
     6e2:	9c 01       	movw	r18, r24
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9e 17       	cp	r25, r30
     6f2:	e0 f0       	brcs	.+56     	; 0x72c <actuator_controll+0x2c8>
     6f4:	e9 17       	cp	r30, r25
     6f6:	e1 f4       	brne	.+56     	; 0x730 <actuator_controll+0x2cc>
     6f8:	8f 17       	cp	r24, r31
     6fa:	c0 f0       	brcs	.+48     	; 0x72c <actuator_controll+0x2c8>
     6fc:	f8 17       	cp	r31, r24
     6fe:	c1 f4       	brne	.+48     	; 0x730 <actuator_controll+0x2cc>
     700:	7a 17       	cp	r23, r26
     702:	a0 f0       	brcs	.+40     	; 0x72c <actuator_controll+0x2c8>
     704:	a7 17       	cp	r26, r23
     706:	a1 f4       	brne	.+40     	; 0x730 <actuator_controll+0x2cc>
     708:	6b 17       	cp	r22, r27
     70a:	80 f0       	brcs	.+32     	; 0x72c <actuator_controll+0x2c8>
     70c:	b6 17       	cp	r27, r22
     70e:	81 f4       	brne	.+32     	; 0x730 <actuator_controll+0x2cc>
     710:	51 17       	cp	r21, r17
     712:	60 f0       	brcs	.+24     	; 0x72c <actuator_controll+0x2c8>
     714:	15 17       	cp	r17, r21
     716:	61 f4       	brne	.+24     	; 0x730 <actuator_controll+0x2cc>
     718:	40 17       	cp	r20, r16
     71a:	40 f0       	brcs	.+16     	; 0x72c <actuator_controll+0x2c8>
     71c:	04 17       	cp	r16, r20
     71e:	41 f4       	brne	.+16     	; 0x730 <actuator_controll+0x2cc>
     720:	3f 15       	cp	r19, r15
     722:	20 f0       	brcs	.+8      	; 0x72c <actuator_controll+0x2c8>
     724:	f3 16       	cp	r15, r19
     726:	21 f4       	brne	.+8      	; 0x730 <actuator_controll+0x2cc>
     728:	2e 15       	cp	r18, r14
     72a:	10 f4       	brcc	.+4      	; 0x730 <actuator_controll+0x2cc>
					next_act_state = 1;						//Actuator out
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	6d c0       	rjmp	.+218    	; 0x80a <actuator_controll+0x3a6>
				else if	((target) < (height - 10))
     730:	e0 90 e4 01 	lds	r14, 0x01E4
     734:	f0 90 e5 01 	lds	r15, 0x01E5
     738:	00 91 e6 01 	lds	r16, 0x01E6
     73c:	10 91 e7 01 	lds	r17, 0x01E7
     740:	f0 91 e8 01 	lds	r31, 0x01E8
     744:	e0 91 e9 01 	lds	r30, 0x01E9
     748:	30 91 ea 01 	lds	r19, 0x01EA
     74c:	20 91 eb 01 	lds	r18, 0x01EB
     750:	80 91 e2 01 	lds	r24, 0x01E2
     754:	90 91 e3 01 	lds	r25, 0x01E3
     758:	0a 97       	sbiw	r24, 0x0a	; 10
     75a:	ac 01       	movw	r20, r24
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	a0 e0       	ldi	r26, 0x00	; 0
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	b2 17       	cp	r27, r18
     76a:	09 f0       	breq	.+2      	; 0x76e <actuator_controll+0x30a>
     76c:	4d c0       	rjmp	.+154    	; 0x808 <actuator_controll+0x3a4>
     76e:	3a 17       	cp	r19, r26
     770:	d8 f0       	brcs	.+54     	; 0x7a8 <actuator_controll+0x344>
     772:	a3 17       	cp	r26, r19
     774:	09 f0       	breq	.+2      	; 0x778 <actuator_controll+0x314>
     776:	48 c0       	rjmp	.+144    	; 0x808 <actuator_controll+0x3a4>
     778:	e9 17       	cp	r30, r25
     77a:	b0 f0       	brcs	.+44     	; 0x7a8 <actuator_controll+0x344>
     77c:	9e 17       	cp	r25, r30
     77e:	09 f0       	breq	.+2      	; 0x782 <actuator_controll+0x31e>
     780:	43 c0       	rjmp	.+134    	; 0x808 <actuator_controll+0x3a4>
     782:	f8 17       	cp	r31, r24
     784:	88 f0       	brcs	.+34     	; 0x7a8 <actuator_controll+0x344>
     786:	8f 17       	cp	r24, r31
     788:	09 f0       	breq	.+2      	; 0x78c <actuator_controll+0x328>
     78a:	3e c0       	rjmp	.+124    	; 0x808 <actuator_controll+0x3a4>
     78c:	17 17       	cp	r17, r23
     78e:	60 f0       	brcs	.+24     	; 0x7a8 <actuator_controll+0x344>
     790:	71 17       	cp	r23, r17
     792:	d1 f5       	brne	.+116    	; 0x808 <actuator_controll+0x3a4>
     794:	06 17       	cp	r16, r22
     796:	40 f0       	brcs	.+16     	; 0x7a8 <actuator_controll+0x344>
     798:	60 17       	cp	r22, r16
     79a:	b1 f5       	brne	.+108    	; 0x808 <actuator_controll+0x3a4>
     79c:	f5 16       	cp	r15, r21
     79e:	20 f0       	brcs	.+8      	; 0x7a8 <actuator_controll+0x344>
     7a0:	5f 15       	cp	r21, r15
     7a2:	91 f5       	brne	.+100    	; 0x808 <actuator_controll+0x3a4>
     7a4:	e4 16       	cp	r14, r20
     7a6:	80 f5       	brcc	.+96     	; 0x808 <actuator_controll+0x3a4>
					next_act_state = 2;						//Actuator in
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	2f c0       	rjmp	.+94     	; 0x80a <actuator_controll+0x3a6>
					next_act_state =3;
			}
			break;

		case 4:		//Actuator in fault condition
			PORTE |= (1<<PE4);  	//Pin 4 High State
     7ac:	74 9a       	sbi	0x0e, 4	; 14
			PORTE |= (1<<PE3);  	//Pin 3 High State
     7ae:	73 9a       	sbi	0x0e, 3	; 14
			next_act_state =4;
     7b0:	20 93 d8 01 	sts	0x01D8, r18
			Cnt4 = 0;
     7b4:	10 92 d0 01 	sts	0x01D0, r1
     7b8:	10 92 cf 01 	sts	0x01CF, r1
			actuator_fault_warning = true;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 e1 01 	sts	0x01E1, r24
			if (act_reset == true)
     7c2:	80 91 dd 01 	lds	r24, 0x01DD
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	11 f5       	brne	.+68     	; 0x80e <actuator_controll+0x3aa>
				{
				next_act_state =5;
     7ca:	85 e0       	ldi	r24, 0x05	; 5
     7cc:	1e c0       	rjmp	.+60     	; 0x80a <actuator_controll+0x3a6>
				}

			break;

		case 5:		//Actuator reset state
			PORTE &= ~(1<<PE3);  	//Pin 3 low State ()
     7ce:	73 98       	cbi	0x0e, 3	; 14
			PORTE |= (1<<PE4);  	//Pin 4 High State
     7d0:	74 9a       	sbi	0x0e, 4	; 14
			Cnt4++;
     7d2:	80 91 cf 01 	lds	r24, 0x01CF
     7d6:	90 91 d0 01 	lds	r25, 0x01D0
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 d0 01 	sts	0x01D0, r25
     7e0:	80 93 cf 01 	sts	0x01CF, r24
			if (Cnt4 > 500)
     7e4:	80 91 cf 01 	lds	r24, 0x01CF
     7e8:	90 91 d0 01 	lds	r25, 0x01D0
     7ec:	85 5f       	subi	r24, 0xF5	; 245
     7ee:	91 40       	sbci	r25, 0x01	; 1
     7f0:	30 f0       	brcs	.+12     	; 0x7fe <actuator_controll+0x39a>
				{
				next_act_state =3;
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	80 93 d8 01 	sts	0x01D8, r24
				act_reset = false;
     7f8:	10 92 dd 01 	sts	0x01DD, r1
     7fc:	08 c0       	rjmp	.+16     	; 0x80e <actuator_controll+0x3aa>
				}
			else
				{next_act_state =5;}
     7fe:	20 93 d8 01 	sts	0x01D8, r18
     802:	05 c0       	rjmp	.+10     	; 0x80e <actuator_controll+0x3aa>

			break;

		default:
			PORTE |= (1<<PE4);  	//Pin 4 High State
     804:	74 9a       	sbi	0x0e, 4	; 14
			PORTE |= (1<<PE3);  	//Pin 3 High State
     806:	73 9a       	sbi	0x0e, 3	; 14
			next_act_state = 3;
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	80 93 d8 01 	sts	0x01D8, r24
			break;
		}
}
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <adc_init>:
/***************************************************************************/
void adc_init (void)
{
	adc_ch = 0;
     818:	10 92 c7 01 	sts	0x01C7, r1
	adc_ports[0] = ADC_PORT_VOLT; /* map voltage measurement to ADC0 */
     81c:	10 92 c8 01 	sts	0x01C8, r1
	adc_ports[1] = ADC_PORT_IN1; /* map analog in 1 to ADC1 */
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 c9 01 	sts	0x01C9, r24
	adc_ports[2] = ADC_PORT_IN2; /* map analog in 2 to ADC2 */
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	80 93 ca 01 	sts	0x01CA, r24

	ADCSRA = BV(ADEN); /* enable ADC conversion */
     82c:	aa e7       	ldi	r26, 0x7A	; 122
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	80 e8       	ldi	r24, 0x80	; 128
     832:	8c 93       	st	X, r24
	ADCSRA |= (BV(ADPS2) | BV(ADPS1) | BV(ADPS0)); /* div by 128 presc. */
     834:	8c 91       	ld	r24, X
     836:	87 60       	ori	r24, 0x07	; 7
     838:	8c 93       	st	X, r24
	ADCSRA |= BV(ADIE); /* interrupt enable */
     83a:	8c 91       	ld	r24, X
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	8c 93       	st	X, r24
	ADMUX = BV(REFS0)| adc_ports[adc_ch]; /* Voltage reference is AREF) */
     840:	e0 91 c7 01 	lds	r30, 0x01C7
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	e8 53       	subi	r30, 0x38	; 56
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	80 81       	ld	r24, Z
     84c:	80 64       	ori	r24, 0x40	; 64
     84e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= BV(ADSC); /* request ADC conversion */
     852:	8c 91       	ld	r24, X
     854:	80 64       	ori	r24, 0x40	; 64
     856:	8c 93       	st	X, r24
}
     858:	08 95       	ret

0000085a <voltage_update>:
/***************************************************************************/
void voltage_update(void)
{
		if (battery_low_warning == false && voltage < voltage_min)
     85a:	80 91 d1 01 	lds	r24, 0x01D1
     85e:	88 23       	and	r24, r24
     860:	79 f4       	brne	.+30     	; 0x880 <voltage_update+0x26>
     862:	20 91 c3 01 	lds	r18, 0x01C3
     866:	30 91 c4 01 	lds	r19, 0x01C4
     86a:	80 91 c5 01 	lds	r24, 0x01C5
     86e:	90 91 c6 01 	lds	r25, 0x01C6
     872:	28 17       	cp	r18, r24
     874:	39 07       	cpc	r19, r25
     876:	98 f4       	brcc	.+38     	; 0x89e <voltage_update+0x44>
			battery_low_warning = true;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 d1 01 	sts	0x01D1, r24
     87e:	08 95       	ret
		else if (battery_low_warning == true && voltage >= voltage_min)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	69 f4       	brne	.+26     	; 0x89e <voltage_update+0x44>
     884:	20 91 c3 01 	lds	r18, 0x01C3
     888:	30 91 c4 01 	lds	r19, 0x01C4
     88c:	80 91 c5 01 	lds	r24, 0x01C5
     890:	90 91 c6 01 	lds	r25, 0x01C6
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	10 f0       	brcs	.+4      	; 0x89e <voltage_update+0x44>
			battery_low_warning = false;
     89a:	10 92 d1 01 	sts	0x01D1, r1
     89e:	08 95       	ret

000008a0 <led_update>:
}
/***************************************************************************/
void led_update(void)
{
	/* led_state = state; */
	switch (led_state) {
     8a0:	80 91 b4 01 	lds	r24, 0x01B4
     8a4:	88 23       	and	r24, r24
     8a6:	31 f0       	breq	.+12     	; 0x8b4 <led_update+0x14>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	d1 f4       	brne	.+52     	; 0x8e0 <led_update+0x40>
		case LED_STATE_ON:
			led_state = LED_STATE_OFF;
     8ac:	10 92 b4 01 	sts	0x01B4, r1
			INT_LED_OFF;
     8b0:	76 9a       	sbi	0x0e, 6	; 14
     8b2:	08 95       	ret
			break;

		case LED_STATE_OFF:
			led_count++;
     8b4:	20 91 ba 01 	lds	r18, 0x01BA
     8b8:	2f 5f       	subi	r18, 0xFF	; 255
     8ba:	20 93 ba 01 	sts	0x01BA, r18
			if (led_count <= led_signal) {
     8be:	80 91 b9 01 	lds	r24, 0x01B9
     8c2:	82 17       	cp	r24, r18
     8c4:	28 f0       	brcs	.+10     	; 0x8d0 <led_update+0x30>
				INT_LED_ON;
     8c6:	76 98       	cbi	0x0e, 6	; 14
				led_state = LED_STATE_ON;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 b4 01 	sts	0x01B4, r24
     8ce:	08 95       	ret
			}
			else if (led_count > led_signal + LED_DELAY) {
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	04 96       	adiw	r24, 0x04	; 4
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	14 f4       	brge	.+4      	; 0x8e0 <led_update+0x40>
				led_count = 0;
     8dc:	10 92 ba 01 	sts	0x01BA, r1
     8e0:	08 95       	ret

000008e2 <led_init>:
	}
}
/***************************************************************************/
void led_init(void)
{
	INT_LED_INIT;
     8e2:	6e 9a       	sbi	0x0d, 6	; 13
	led_count = 0;
     8e4:	10 92 ba 01 	sts	0x01BA, r1
	led_signal = 1;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 b9 01 	sts	0x01B9, r24

	led_state = LED_STATE_OFF;
     8ee:	10 92 b4 01 	sts	0x01B4, r1
}
     8f2:	08 95       	ret

000008f4 <button_update>:
/***************************************************************************/
void button_update(void)
{
	but1 = PB_IS_HIGH (PIND, PIND7); /* button enabled if logic zero */
     8f4:	89 b1       	in	r24, 0x09	; 9
     8f6:	80 78       	andi	r24, 0x80	; 128
     8f8:	80 93 b1 01 	sts	0x01B1, r24
}
     8fc:	08 95       	ret

000008fe <button_init>:
/***************************************************************************/
void button_init(void)
{
	PB_PULL_UP (PORTD, PD7); /* enable pull-up resistor */
     8fe:	5f 9a       	sbi	0x0b, 7	; 11
	led_state = LED_STATE_OFF;
}
/***************************************************************************/
void button_update(void)
{
	but1 = PB_IS_HIGH (PIND, PIND7); /* button enabled if logic zero */
     900:	89 b1       	in	r24, 0x09	; 9
     902:	80 78       	andi	r24, 0x80	; 128
     904:	80 93 b1 01 	sts	0x01B1, r24
/***************************************************************************/
void button_init(void)
{
	PB_PULL_UP (PORTD, PD7); /* enable pull-up resistor */
	button_update();
}
     908:	08 95       	ret

0000090a <state_update>:
}
/***************************************************************************/
void state_update(void)
{

	if (actuator_fault_warning == true)
     90a:	80 91 e1 01 	lds	r24, 0x01E1
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	11 f4       	brne	.+4      	; 0x916 <state_update+0xc>
		state = STATE_ERR_ACTUATOR;
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	1b c0       	rjmp	.+54     	; 0x94c <state_update+0x42>

	else 
	if (battery_low_warning == true)
     916:	80 91 d1 01 	lds	r24, 0x01D1
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	11 f4       	brne	.+4      	; 0x922 <state_update+0x18>
		state = STATE_ERR_LOWBAT;
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	15 c0       	rjmp	.+42     	; 0x94c <state_update+0x42>
/*	else if (nmea_wd > NMEA_WD_TOUT)
	{
		state = STATE_ERR_WATCHDOG; 
		actuator_param_received = false; 
	}*/
	else if (actuator_param_received == false)
     922:	80 91 e0 01 	lds	r24, 0x01E0
     926:	88 23       	and	r24, r24
     928:	11 f4       	brne	.+4      	; 0x92e <state_update+0x24>
		state = STATE_ERR_NO_CONFIG; 
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0f c0       	rjmp	.+30     	; 0x94c <state_update+0x42>
	else if (nmea_err != 0)
     92e:	80 91 8e 02 	lds	r24, 0x028E
     932:	90 91 8f 02 	lds	r25, 0x028F
     936:	89 2b       	or	r24, r25
     938:	41 f0       	breq	.+16     	; 0x94a <state_update+0x40>
	{
		state = STATE_WARN_NMEA_CS;
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	80 93 be 01 	sts	0x01BE, r24
		nmea_err = 0;		
     940:	10 92 8f 02 	sts	0x028F, r1
     944:	10 92 8e 02 	sts	0x028E, r1
     948:	03 c0       	rjmp	.+6      	; 0x950 <state_update+0x46>
	}		
	else
		state = STATE_OK;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 be 01 	sts	0x01BE, r24

	led_signal = state; /* Frobomind Controller LED flashes state number */
     950:	80 91 be 01 	lds	r24, 0x01BE
     954:	80 93 b9 01 	sts	0x01B9, r24
}
     958:	08 95       	ret

0000095a <save_reset_source>:
}

/***************************************************************************/
void save_reset_source(void)
{
	char reset_reg = MCUSR; /* save the source of the latest reset */
     95a:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
     95c:	14 be       	out	0x34, r1	; 52
	switch (reset_reg) 
     95e:	84 30       	cpi	r24, 0x04	; 4
     960:	89 f0       	breq	.+34     	; 0x984 <save_reset_source+0x2a>
     962:	85 30       	cpi	r24, 0x05	; 5
     964:	28 f4       	brcc	.+10     	; 0x970 <save_reset_source+0x16>
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	41 f0       	breq	.+16     	; 0x97a <save_reset_source+0x20>
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	a1 f4       	brne	.+40     	; 0x996 <save_reset_source+0x3c>
     96e:	08 c0       	rjmp	.+16     	; 0x980 <save_reset_source+0x26>
     970:	88 30       	cpi	r24, 0x08	; 8
     972:	51 f0       	breq	.+20     	; 0x988 <save_reset_source+0x2e>
     974:	80 31       	cpi	r24, 0x10	; 16
     976:	79 f4       	brne	.+30     	; 0x996 <save_reset_source+0x3c>
     978:	0b c0       	rjmp	.+22     	; 0x990 <save_reset_source+0x36>
	{
		case 1: /* power on */
			reset_source = 0; break;
     97a:	10 92 00 01 	sts	0x0100, r1
     97e:	08 95       	ret
		case 2: /* reset activated */
			reset_source = 1; break;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	03 c0       	rjmp	.+6      	; 0x98a <save_reset_source+0x30>
		case 4: /* brown out */
			reset_source = 2; break;
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	01 c0       	rjmp	.+2      	; 0x98a <save_reset_source+0x30>
		case 8: /* watchdog */
			reset_source = 3; break;
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	80 93 00 01 	sts	0x0100, r24
     98e:	08 95       	ret
		case 16: /* jtag */
			reset_source = 4; break;
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	80 93 00 01 	sts	0x0100, r24
     996:	08 95       	ret

00000998 <nmea_tx_status>:
}
/***************************************************************************/
void nmea_tx_status(void)
{
//	long tl, tr;
	tx_len = 7; /* keep the NMEA message prefix */
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	90 93 31 03 	sts	0x0331, r25
     9a0:	80 93 30 03 	sts	0x0330, r24

	nmea_tx_append_ushort (state);
     9a4:	80 91 be 01 	lds	r24, 0x01BE
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 2f 07 	call	0xe5e	; 0xe5e <nmea_tx_append_ushort>


	nmea_tx_append_short (next_act_state);
     9ae:	80 91 d8 01 	lds	r24, 0x01D8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 50 07 	call	0xea0	; 0xea0 <nmea_tx_append_short>
	nmea_tx_append_short (dist);
     9b8:	80 91 bf 01 	lds	r24, 0x01BF
     9bc:	90 91 c0 01 	lds	r25, 0x01C0
     9c0:	a0 91 c1 01 	lds	r26, 0x01C1
     9c4:	b0 91 c2 01 	lds	r27, 0x01C2
     9c8:	0e 94 50 07 	call	0xea0	; 0xea0 <nmea_tx_append_short>
	nmea_tx_append_short (target);
     9cc:	20 91 e4 01 	lds	r18, 0x01E4
     9d0:	30 91 e5 01 	lds	r19, 0x01E5
     9d4:	80 91 e6 01 	lds	r24, 0x01E6
     9d8:	80 91 e7 01 	lds	r24, 0x01E7
     9dc:	80 91 e8 01 	lds	r24, 0x01E8
     9e0:	80 91 e9 01 	lds	r24, 0x01E9
     9e4:	80 91 ea 01 	lds	r24, 0x01EA
     9e8:	80 91 eb 01 	lds	r24, 0x01EB
     9ec:	c9 01       	movw	r24, r18
     9ee:	0e 94 50 07 	call	0xea0	; 0xea0 <nmea_tx_append_short>
	nmea_tx_append_short (height1);
     9f2:	80 91 d9 01 	lds	r24, 0x01D9
     9f6:	90 91 da 01 	lds	r25, 0x01DA
     9fa:	0e 94 50 07 	call	0xea0	; 0xea0 <nmea_tx_append_short>
	nmea_tx_append_short (height2);
     9fe:	80 91 af 01 	lds	r24, 0x01AF
     a02:	90 91 b0 01 	lds	r25, 0x01B0
     a06:	0e 94 50 07 	call	0xea0	; 0xea0 <nmea_tx_append_short>
	nmea_tx_append_ushort (voltage); /* battery voltage [0;1023] */
     a0a:	80 91 c3 01 	lds	r24, 0x01C3
     a0e:	90 91 c4 01 	lds	r25, 0x01C4
     a12:	0e 94 2f 07 	call	0xe5e	; 0xe5e <nmea_tx_append_ushort>


	tx_len--; /* delete the last comma */
     a16:	80 91 30 03 	lds	r24, 0x0330
     a1a:	90 91 31 03 	lds	r25, 0x0331
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	90 93 31 03 	sts	0x0331, r25
     a24:	80 93 30 03 	sts	0x0330, r24
	nmea_tx();
     a28:	0e 94 d4 06 	call	0xda8	; 0xda8 <nmea_tx>
}
     a2c:	08 95       	ret

00000a2e <sched_update>:
	led_signal = state; /* Frobomind Controller LED flashes state number */
}
/***************************************************************************/
void sched_update (void)
{
	t1ms_cnt++;
     a2e:	80 91 aa 01 	lds	r24, 0x01AA
     a32:	90 91 ab 01 	lds	r25, 0x01AB
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	90 93 ab 01 	sts	0x01AB, r25
     a3c:	80 93 aa 01 	sts	0x01AA, r24
	if (t1ms_cnt == 10000)
     a40:	80 51       	subi	r24, 0x10	; 16
     a42:	97 42       	sbci	r25, 0x27	; 39
     a44:	21 f4       	brne	.+8      	; 0xa4e <sched_update+0x20>
		t1ms_cnt = 0;
     a46:	10 92 ab 01 	sts	0x01AB, r1
     a4a:	10 92 aa 01 	sts	0x01AA, r1
	

	/* each 10 ms */
	if (t1ms_cnt % 10 == 0) /* each 10 ms */
     a4e:	20 91 aa 01 	lds	r18, 0x01AA
     a52:	30 91 ab 01 	lds	r19, 0x01AB
     a56:	c9 01       	movw	r24, r18
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
     a60:	89 2b       	or	r24, r25
     a62:	09 f0       	breq	.+2      	; 0xa66 <sched_update+0x38>
     a64:	66 c0       	rjmp	.+204    	; 0xb32 <sched_update+0x104>
	{
		wdt_reset(); /* reset watchdog */
     a66:	a8 95       	wdr

		if (t1ms_cnt % 20 == 0) /* each 20 ms */
     a68:	c9 01       	movw	r24, r18
     a6a:	64 e1       	ldi	r22, 0x14	; 20
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
     a72:	89 2b       	or	r24, r25
     a74:	11 f5       	brne	.+68     	; 0xaba <sched_update+0x8c>
		{
			height1 = adc_data[1]; /* read ADC1 measurement */
     a76:	80 91 d4 01 	lds	r24, 0x01D4
     a7a:	90 91 d5 01 	lds	r25, 0x01D5
     a7e:	90 93 da 01 	sts	0x01DA, r25
     a82:	80 93 d9 01 	sts	0x01D9, r24
			height2 = adc_data[2]; /* read ADC2 measurement */
     a86:	80 91 d6 01 	lds	r24, 0x01D6
     a8a:	90 91 d7 01 	lds	r25, 0x01D7
     a8e:	90 93 b0 01 	sts	0x01B0, r25
     a92:	80 93 af 01 	sts	0x01AF, r24
			height = ((height1 + height2)>>1);
     a96:	20 91 d9 01 	lds	r18, 0x01D9
     a9a:	30 91 da 01 	lds	r19, 0x01DA
     a9e:	80 91 af 01 	lds	r24, 0x01AF
     aa2:	90 91 b0 01 	lds	r25, 0x01B0
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	90 93 e3 01 	sts	0x01E3, r25
     ab2:	80 93 e2 01 	sts	0x01E2, r24


//			height = ((height + adc_data[2])>>1); /* read voltage measurement */
			actuator_controll();
     ab6:	0e 94 32 02 	call	0x464	; 0x464 <actuator_controll>

		if (t1ms_cnt % 50 == 0) /* each 50 ms */
		{
		}

		if (t1ms_cnt % 100 == 0) /* each 100 ms */
     aba:	80 91 aa 01 	lds	r24, 0x01AA
     abe:	90 91 ab 01 	lds	r25, 0x01AB
     ac2:	64 e6       	ldi	r22, 0x64	; 100
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
     aca:	89 2b       	or	r24, r25
     acc:	f1 f4       	brne	.+60     	; 0xb0a <sched_update+0xdc>
		{
			if (nmea_wd_timeout)
     ace:	80 91 bb 01 	lds	r24, 0x01BB
     ad2:	90 91 bc 01 	lds	r25, 0x01BC
     ad6:	89 2b       	or	r24, r25
     ad8:	51 f0       	breq	.+20     	; 0xaee <sched_update+0xc0>
				nmea_wd++; /* increase nmea watchdog timeout */
     ada:	80 91 db 01 	lds	r24, 0x01DB
     ade:	90 91 dc 01 	lds	r25, 0x01DC
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	90 93 dc 01 	sts	0x01DC, r25
     ae8:	80 93 db 01 	sts	0x01DB, r24
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <sched_update+0xc8>
			else
				nmea_wd = 0;
     aee:	10 92 dc 01 	sts	0x01DC, r1
     af2:	10 92 db 01 	sts	0x01DB, r1
			voltage = adc_data[0]; /* read voltage measurement */
     af6:	80 91 d2 01 	lds	r24, 0x01D2
     afa:	90 91 d3 01 	lds	r25, 0x01D3
     afe:	90 93 c4 01 	sts	0x01C4, r25
     b02:	80 93 c3 01 	sts	0x01C3, r24
			state_update();
     b06:	0e 94 85 04 	call	0x90a	; 0x90a <state_update>
		}
		if (t1ms_cnt % 200 == 0) /* each 200 ms */
     b0a:	80 91 aa 01 	lds	r24, 0x01AA
     b0e:	90 91 ab 01 	lds	r25, 0x01AB
     b12:	68 ec       	ldi	r22, 0xC8	; 200
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
     b1a:	89 2b       	or	r24, r25
     b1c:	51 f4       	brne	.+20     	; 0xb32 <sched_update+0x104>
	led_state = LED_STATE_OFF;
}
/***************************************************************************/
void button_update(void)
{
	but1 = PB_IS_HIGH (PIND, PIND7); /* button enabled if logic zero */
     b1e:	89 b1       	in	r24, 0x09	; 9
     b20:	80 78       	andi	r24, 0x80	; 128
     b22:	80 93 b1 01 	sts	0x01B1, r24
			state_update();
		}
		if (t1ms_cnt % 200 == 0) /* each 200 ms */
		{
			button_update();		
			led_update();
     b26:	0e 94 50 04 	call	0x8a0	; 0x8a0 <led_update>
			voltage_update();
     b2a:	0e 94 2d 04 	call	0x85a	; 0x85a <voltage_update>
			nmea_tx_status();
     b2e:	0e 94 cc 04 	call	0x998	; 0x998 <nmea_tx_status>
     b32:	08 95       	ret

00000b34 <nmea_rx_parse>:
	nmea_ticks_r = 0;
}
/***************************************************************************/
void nmea_rx_parse(void)
{		/* Commonication for Frobo_Row_Cleaner*/
	if (rx[0] == 'P' && rx[1] == 'F' && rx[2] == 'R') 		
     b34:	80 91 ec 01 	lds	r24, 0x01EC
     b38:	80 35       	cpi	r24, 0x50	; 80
     b3a:	09 f0       	breq	.+2      	; 0xb3e <nmea_rx_parse+0xa>
     b3c:	81 c0       	rjmp	.+258    	; 0xc40 <nmea_rx_parse+0x10c>
     b3e:	80 91 ed 01 	lds	r24, 0x01ED
     b42:	86 34       	cpi	r24, 0x46	; 70
     b44:	09 f0       	breq	.+2      	; 0xb48 <nmea_rx_parse+0x14>
     b46:	7c c0       	rjmp	.+248    	; 0xc40 <nmea_rx_parse+0x10c>
     b48:	80 91 ee 01 	lds	r24, 0x01EE
     b4c:	82 35       	cpi	r24, 0x52	; 82
     b4e:	09 f0       	breq	.+2      	; 0xb52 <nmea_rx_parse+0x1e>
     b50:	77 c0       	rjmp	.+238    	; 0xc40 <nmea_rx_parse+0x10c>
	{
		if (rx[3] == 'S' && rx[4] == 'P') /* System Parameters */
     b52:	80 91 ef 01 	lds	r24, 0x01EF
     b56:	83 35       	cpi	r24, 0x53	; 83
     b58:	91 f4       	brne	.+36     	; 0xb7e <nmea_rx_parse+0x4a>
     b5a:	80 91 f0 01 	lds	r24, 0x01F0
     b5e:	80 35       	cpi	r24, 0x50	; 80
     b60:	09 f0       	breq	.+2      	; 0xb64 <nmea_rx_parse+0x30>
     b62:	6e c0       	rjmp	.+220    	; 0xc40 <nmea_rx_parse+0x10c>
		{
			rx_ite = 5; /* jump to first value */
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 8d 02 	sts	0x028D, r25
     b6c:	80 93 8c 02 	sts	0x028C, r24
			voltage_min = nmea_rx_next_val();
     b70:	0e 94 63 08 	call	0x10c6	; 0x10c6 <nmea_rx_next_val>
     b74:	90 93 c6 01 	sts	0x01C6, r25
     b78:	80 93 c5 01 	sts	0x01C5, r24
     b7c:	08 95       	ret
		}
		else if (rx[3] == 'C' && rx[4] == 'P') /* Communication Parameters */
     b7e:	83 34       	cpi	r24, 0x43	; 67
     b80:	01 f5       	brne	.+64     	; 0xbc2 <nmea_rx_parse+0x8e>
     b82:	80 91 f0 01 	lds	r24, 0x01F0
     b86:	80 35       	cpi	r24, 0x50	; 80
     b88:	09 f0       	breq	.+2      	; 0xb8c <nmea_rx_parse+0x58>
     b8a:	5a c0       	rjmp	.+180    	; 0xc40 <nmea_rx_parse+0x10c>
		{
			rx_ite = 5; /* jump to first value */
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	90 93 8d 02 	sts	0x028D, r25
     b94:	80 93 8c 02 	sts	0x028C, r24
			pfbst_interval = nmea_rx_next_val();
     b98:	0e 94 63 08 	call	0x10c6	; 0x10c6 <nmea_rx_next_val>
     b9c:	90 93 ae 01 	sts	0x01AE, r25
     ba0:	80 93 ad 01 	sts	0x01AD, r24
			if (rx_ite != -1)
     ba4:	80 91 8c 02 	lds	r24, 0x028C
     ba8:	90 91 8d 02 	lds	r25, 0x028D
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <nmea_rx_parse+0x80>
     bb2:	46 c0       	rjmp	.+140    	; 0xc40 <nmea_rx_parse+0x10c>
				nmea_wd_timeout = nmea_rx_next_val();
     bb4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <nmea_rx_next_val>
     bb8:	90 93 bc 01 	sts	0x01BC, r25
     bbc:	80 93 bb 01 	sts	0x01BB, r24
     bc0:	08 95       	ret
		}
		else if (rx[3] == 'A' && rx[4] == 'C') /* Actuator Control */
     bc2:	81 34       	cpi	r24, 0x41	; 65
     bc4:	e9 f5       	brne	.+122    	; 0xc40 <nmea_rx_parse+0x10c>
     bc6:	80 91 f0 01 	lds	r24, 0x01F0
     bca:	83 34       	cpi	r24, 0x43	; 67
     bcc:	c1 f4       	brne	.+48     	; 0xbfe <nmea_rx_parse+0xca>
		{
			rx_ite = 5; /* jump to first value */
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	90 93 8d 02 	sts	0x028D, r25
     bd6:	80 93 8c 02 	sts	0x028C, r24
			dist = ((nmea_rx_next_val()));		//Set whanted distance for actuator [0-100]
     bda:	0e 94 63 08 	call	0x10c6	; 0x10c6 <nmea_rx_next_val>
     bde:	aa 27       	eor	r26, r26
     be0:	97 fd       	sbrc	r25, 7
     be2:	a0 95       	com	r26
     be4:	ba 2f       	mov	r27, r26
     be6:	80 93 bf 01 	sts	0x01BF, r24
     bea:	90 93 c0 01 	sts	0x01C0, r25
     bee:	a0 93 c1 01 	sts	0x01C1, r26
     bf2:	b0 93 c2 01 	sts	0x01C2, r27
			actuator_param_received = true;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 e0 01 	sts	0x01E0, r24
     bfc:	08 95       	ret
		}
		else if (rx[3] == 'A' && rx[4] == 'R'&& rx[6] == 'R'&& rx[7] == 'E'&& rx[8] == 'S'&& rx[9] == 'E'&& rx[10] == 'T') /* Actuator Control */
     bfe:	82 35       	cpi	r24, 0x52	; 82
     c00:	f9 f4       	brne	.+62     	; 0xc40 <nmea_rx_parse+0x10c>
     c02:	80 91 f2 01 	lds	r24, 0x01F2
     c06:	82 35       	cpi	r24, 0x52	; 82
     c08:	d9 f4       	brne	.+54     	; 0xc40 <nmea_rx_parse+0x10c>
     c0a:	80 91 f3 01 	lds	r24, 0x01F3
     c0e:	85 34       	cpi	r24, 0x45	; 69
     c10:	b9 f4       	brne	.+46     	; 0xc40 <nmea_rx_parse+0x10c>
     c12:	80 91 f4 01 	lds	r24, 0x01F4
     c16:	83 35       	cpi	r24, 0x53	; 83
     c18:	99 f4       	brne	.+38     	; 0xc40 <nmea_rx_parse+0x10c>
     c1a:	80 91 f5 01 	lds	r24, 0x01F5
     c1e:	85 34       	cpi	r24, 0x45	; 69
     c20:	79 f4       	brne	.+30     	; 0xc40 <nmea_rx_parse+0x10c>
     c22:	80 91 f6 01 	lds	r24, 0x01F6
     c26:	84 35       	cpi	r24, 0x54	; 84
     c28:	59 f4       	brne	.+22     	; 0xc40 <nmea_rx_parse+0x10c>
		{
			rx_ite = 5; /* jump to first value */
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 8d 02 	sts	0x028D, r25
     c32:	80 93 8c 02 	sts	0x028C, r24
			act_reset = true;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 dd 01 	sts	0x01DD, r24
			actuator_param_received = true;
     c3c:	80 93 e0 01 	sts	0x01E0, r24
     c40:	08 95       	ret

00000c42 <nmea_init>:
	button_update();
}
/***************************************************************************/
void nmea_init(void)
{
	nmea_reset();
     c42:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nmea_reset>
	nmea_wd = 0xffff; /* set watchdog timeout at init */
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	90 93 dc 01 	sts	0x01DC, r25
     c4e:	80 93 db 01 	sts	0x01DB, r24

	tx[0] = '$'; /* send first boot message */
     c52:	84 e2       	ldi	r24, 0x24	; 36
     c54:	80 93 90 02 	sts	0x0290, r24
	tx[1] = 'P';
     c58:	80 e5       	ldi	r24, 0x50	; 80
     c5a:	80 93 91 02 	sts	0x0291, r24
	tx[2] = 'F';
     c5e:	86 e4       	ldi	r24, 0x46	; 70
     c60:	80 93 92 02 	sts	0x0292, r24
	tx[3] = 'R';
     c64:	82 e5       	ldi	r24, 0x52	; 82
     c66:	80 93 93 02 	sts	0x0293, r24
	tx[4] = 'H';
     c6a:	88 e4       	ldi	r24, 0x48	; 72
     c6c:	80 93 94 02 	sts	0x0294, r24
	tx[5] = 'I';
     c70:	89 e4       	ldi	r24, 0x49	; 73
     c72:	80 93 95 02 	sts	0x0295, r24
	tx[6] = ',';
     c76:	9c e2       	ldi	r25, 0x2C	; 44
     c78:	90 93 96 02 	sts	0x0296, r25
	tx[7] = '2'; /* hw version */		
     c7c:	82 e3       	ldi	r24, 0x32	; 50
     c7e:	80 93 97 02 	sts	0x0297, r24
	tx[8] = ',';
     c82:	90 93 98 02 	sts	0x0298, r25
	tx[9] = '1'; /* sw major version */	
     c86:	81 e3       	ldi	r24, 0x31	; 49
     c88:	80 93 99 02 	sts	0x0299, r24
	tx[10] = ',';
     c8c:	90 93 9a 02 	sts	0x029A, r25
	tx[11] = '1'; /* sw minor version */
     c90:	80 93 9b 02 	sts	0x029B, r24
	tx[12] = ',';
     c94:	90 93 9c 02 	sts	0x029C, r25
	tx[13] = '0' + reset_source; /* latest reset type */
     c98:	80 91 00 01 	lds	r24, 0x0100
     c9c:	80 5d       	subi	r24, 0xD0	; 208
     c9e:	80 93 9d 02 	sts	0x029D, r24
	tx_len = 14;
     ca2:	8e e0       	ldi	r24, 0x0E	; 14
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 31 03 	sts	0x0331, r25
     caa:	80 93 30 03 	sts	0x0330, r24
	nmea_tx();
     cae:	0e 94 d4 06 	call	0xda8	; 0xda8 <nmea_tx>

	tx[4] = 'S'; /* prepare for status messages */
     cb2:	83 e5       	ldi	r24, 0x53	; 83
     cb4:	80 93 94 02 	sts	0x0294, r24
	tx[5] = 'T';
     cb8:	84 e5       	ldi	r24, 0x54	; 84
     cba:	80 93 95 02 	sts	0x0295, r24
	tx_len = 7;
     cbe:	87 e0       	ldi	r24, 0x07	; 7
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 31 03 	sts	0x0331, r25
     cc6:	80 93 30 03 	sts	0x0330, r24

	nmea_ticks_l = 0;
     cca:	10 92 b5 01 	sts	0x01B5, r1
     cce:	10 92 b6 01 	sts	0x01B6, r1
     cd2:	10 92 b7 01 	sts	0x01B7, r1
     cd6:	10 92 b8 01 	sts	0x01B8, r1
	nmea_ticks_r = 0;
     cda:	10 92 cb 01 	sts	0x01CB, r1
     cde:	10 92 cc 01 	sts	0x01CC, r1
     ce2:	10 92 cd 01 	sts	0x01CD, r1
     ce6:	10 92 ce 01 	sts	0x01CE, r1
}
     cea:	08 95       	ret

00000cec <main>:
	}
}
/***************************************************************************/
int main(void)
{
	save_reset_source(); /* determine the cause of the startup */
     cec:	0e 94 ad 04 	call	0x95a	; 0x95a <save_reset_source>

/***************************************************************************/
void sched_init(void)
{
	/* timer 0 interrupt init (each 1ms) */
	t1ms = 0;
     cf0:	10 92 bd 01 	sts	0x01BD, r1
	t1ms_cnt = 0;
     cf4:	10 92 ab 01 	sts	0x01AB, r1
     cf8:	10 92 aa 01 	sts	0x01AA, r1
    TIMSK0 = BV(OCIE0A); 
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	80 93 6e 00 	sts	0x006E, r24
    TCCR0A = BV(CS00) | BV(CS01) | BV(WGM01); /* clk/64, TOS is defined as OCR0A */  
     d02:	8b e0       	ldi	r24, 0x0B	; 11
     d04:	84 bd       	out	0x24, r24	; 36
    OCR0A = INT0_CNT_TOP;
     d06:	89 ef       	ldi	r24, 0xF9	; 249
     d08:	87 bd       	out	0x27, r24	; 39
	}
}
/***************************************************************************/
void led_init(void)
{
	INT_LED_INIT;
     d0a:	6e 9a       	sbi	0x0d, 6	; 13
	led_count = 0;
     d0c:	10 92 ba 01 	sts	0x01BA, r1
	led_signal = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 b9 01 	sts	0x01B9, r24

	led_state = LED_STATE_OFF;
     d16:	10 92 b4 01 	sts	0x01B4, r1
	but1 = PB_IS_HIGH (PIND, PIND7); /* button enabled if logic zero */
}
/***************************************************************************/
void button_init(void)
{
	PB_PULL_UP (PORTD, PD7); /* enable pull-up resistor */
     d1a:	5f 9a       	sbi	0x0b, 7	; 11
	led_state = LED_STATE_OFF;
}
/***************************************************************************/
void button_update(void)
{
	but1 = PB_IS_HIGH (PIND, PIND7); /* button enabled if logic zero */
     d1c:	89 b1       	in	r24, 0x09	; 9
     d1e:	80 78       	andi	r24, 0x80	; 128
     d20:	80 93 b1 01 	sts	0x01B1, r24
}
/***************************************************************************/
/* Setup of port used for the Actuator */
void actuator_init (void)
{
	DDRE = 	0b01111000;  //Pin 3, 4, 5 and 6 of PORTE declared as output
     d24:	88 e7       	ldi	r24, 0x78	; 120
     d26:	8d b9       	out	0x0d, r24	; 13
	PORTE= 	0x00;			//No pullup	
     d28:	1e b8       	out	0x0e, r1	; 14
	DDRA = 	0b00000000;  //Pin 0, 2, 3 and 4 of PORTA declared as input
     d2a:	11 b8       	out	0x01, r1	; 1
	PORTA= 	0x00;			//No pullup
     d2c:	12 b8       	out	0x02, r1	; 2
	save_reset_source(); /* determine the cause of the startup */
	sched_init(); /* initialize the scheduler */
	led_init(); /* initialize led */
	button_init(); /* initialize button */
	actuator_init();/* initialize Actuator (Actuator port declaration) */
	adc_init(); /* initialize ADC (battery voltage measurement) */
     d2e:	0e 94 0c 04 	call	0x818	; 0x818 <adc_init>
	serial_init(); /* initialize serial communication */
     d32:	0e 94 6b 00 	call	0xd6	; 0xd6 <serial_init>
	pfbst_interval = 20; /* send $PFBST at 20 ms interval */
     d36:	84 e1       	ldi	r24, 0x14	; 20
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	90 93 ae 01 	sts	0x01AE, r25
     d3e:	80 93 ad 01 	sts	0x01AD, r24
	nmea_wd_timeout = 1; /* set PFBCT watchdog timeout to 100ms */
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 bc 01 	sts	0x01BC, r25
     d4a:	80 93 bb 01 	sts	0x01BB, r24
	nmea_wd = NMEA_WD_TOUT+1; /* make sure we begin in watchdog timeout state */
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 dc 01 	sts	0x01DC, r25
     d56:	80 93 db 01 	sts	0x01DB, r24
	voltage_min = VOLTAGE_MIN_DEFAULT;
     d5a:	80 e4       	ldi	r24, 0x40	; 64
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	90 93 c6 01 	sts	0x01C6, r25
     d62:	80 93 c5 01 	sts	0x01C5, r24
	battery_low_warning = false;
     d66:	10 92 d1 01 	sts	0x01D1, r1
	state_update();
     d6a:	0e 94 85 04 	call	0x90a	; 0x90a <state_update>
	sei(); /* enable interrupts */
     d6e:	78 94       	sei
	wdt_enable (WDTO_15MS); /* enable watchdog reset at approx 15 ms (ref. p.58) */
     d70:	28 e0       	ldi	r18, 0x08	; 8
     d72:	88 e1       	ldi	r24, 0x18	; 24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	a8 95       	wdr
     d7c:	80 93 60 00 	sts	0x0060, r24
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	20 93 60 00 	sts	0x0060, r18
	nmea_init(); /* initialize nmea protocol handler */
     d86:	0e 94 21 06 	call	0xc42	; 0xc42 <nmea_init>

	for (;;) /* go into an endless loop */
	{
		/* motor_update(); */

		if (t1ms != 0) /* if the interrupt has timed out after 10ms */
     d8a:	80 91 bd 01 	lds	r24, 0x01BD
     d8e:	88 23       	and	r24, r24
     d90:	41 f0       	breq	.+16     	; 0xda2 <main+0xb6>
		{
			t1ms --;
     d92:	80 91 bd 01 	lds	r24, 0x01BD
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	80 93 bd 01 	sts	0x01BD, r24
			sched_update(); /* run the scheduler */
     d9c:	0e 94 17 05 	call	0xa2e	; 0xa2e <sched_update>
     da0:	f4 cf       	rjmp	.-24     	; 0xd8a <main+0x9e>
		}
		else
		{
			nmea_rx_update();
     da2:	0e 94 71 07 	call	0xee2	; 0xee2 <nmea_rx_update>
     da6:	f1 cf       	rjmp	.-30     	; 0xd8a <main+0x9e>

00000da8 <nmea_tx>:
{
	short i;
	unsigned char cs = 0;

	/* calculate checksum */
	tx[tx_len++] = '*';
     da8:	80 91 30 03 	lds	r24, 0x0330
     dac:	90 91 31 03 	lds	r25, 0x0331
     db0:	fc 01       	movw	r30, r24
     db2:	e0 57       	subi	r30, 0x70	; 112
     db4:	fd 4f       	sbci	r31, 0xFD	; 253
     db6:	2a e2       	ldi	r18, 0x2A	; 42
     db8:	20 83       	st	Z, r18
     dba:	bc 01       	movw	r22, r24
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	70 93 31 03 	sts	0x0331, r23
     dc4:	60 93 30 03 	sts	0x0330, r22
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e0       	ldi	r20, 0x00	; 0
	for (i=1; i<tx_len-1; i++)
     dce:	dc 01       	movw	r26, r24
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <nmea_tx+0x38>
		cs ^= tx[i];
     dd2:	f9 01       	movw	r30, r18
     dd4:	e0 57       	subi	r30, 0x70	; 112
     dd6:	fd 4f       	sbci	r31, 0xFD	; 253
     dd8:	80 81       	ld	r24, Z
     dda:	48 27       	eor	r20, r24
	short i;
	unsigned char cs = 0;

	/* calculate checksum */
	tx[tx_len++] = '*';
	for (i=1; i<tx_len-1; i++)
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	2a 17       	cp	r18, r26
     de2:	3b 07       	cpc	r19, r27
     de4:	b4 f3       	brlt	.-20     	; 0xdd2 <nmea_tx+0x2a>
		cs ^= tx[i];
	utoa(cs,tx+tx_len,16);
     de6:	60 57       	subi	r22, 0x70	; 112
     de8:	7d 4f       	sbci	r23, 0xFD	; 253
     dea:	84 2f       	mov	r24, r20
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	40 e1       	ldi	r20, 0x10	; 16
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 4b 09 	call	0x1296	; 0x1296 <utoa>

	/* force capital letters */
	i = tx_len+2;
     df6:	80 91 30 03 	lds	r24, 0x0330
     dfa:	90 91 31 03 	lds	r25, 0x0331
     dfe:	9c 01       	movw	r18, r24
     e00:	2e 5f       	subi	r18, 0xFE	; 254
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	fc 01       	movw	r30, r24
     e06:	e0 57       	subi	r30, 0x70	; 112
     e08:	fd 4f       	sbci	r31, 0xFD	; 253
	for (; tx_len!=i; tx_len++) {
     e0a:	a9 01       	movw	r20, r18
     e0c:	40 57       	subi	r20, 0x70	; 112
     e0e:	5d 4f       	sbci	r21, 0xFD	; 253
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <nmea_tx+0x7a>
		if(tx[tx_len] > 0x60 && tx[tx_len] < 0x67)
     e12:	90 81       	ld	r25, Z
     e14:	89 2f       	mov	r24, r25
     e16:	81 56       	subi	r24, 0x61	; 97
     e18:	86 30       	cpi	r24, 0x06	; 6
     e1a:	10 f4       	brcc	.+4      	; 0xe20 <nmea_tx+0x78>
			tx[tx_len] -= 0x20;
     e1c:	90 52       	subi	r25, 0x20	; 32
     e1e:	90 83       	st	Z, r25
     e20:	31 96       	adiw	r30, 0x01	; 1
		cs ^= tx[i];
	utoa(cs,tx+tx_len,16);

	/* force capital letters */
	i = tx_len+2;
	for (; tx_len!=i; tx_len++) {
     e22:	e4 17       	cp	r30, r20
     e24:	f5 07       	cpc	r31, r21
     e26:	a9 f7       	brne	.-22     	; 0xe12 <nmea_tx+0x6a>
		if(tx[tx_len] > 0x60 && tx[tx_len] < 0x67)
			tx[tx_len] -= 0x20;
	}

	/* add CR LF and send the message */
	tx[tx_len++] = 13;
     e28:	f9 01       	movw	r30, r18
     e2a:	e0 57       	subi	r30, 0x70	; 112
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	8d e0       	ldi	r24, 0x0D	; 13
     e30:	80 83       	st	Z, r24
     e32:	c9 01       	movw	r24, r18
     e34:	01 96       	adiw	r24, 0x01	; 1
	tx[tx_len++] = 10;
     e36:	fc 01       	movw	r30, r24
     e38:	e0 57       	subi	r30, 0x70	; 112
     e3a:	fd 4f       	sbci	r31, 0xFD	; 253
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	20 83       	st	Z, r18
     e40:	01 96       	adiw	r24, 0x01	; 1
	tx[tx_len++] = 0;
     e42:	fc 01       	movw	r30, r24
     e44:	e0 57       	subi	r30, 0x70	; 112
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
     e48:	10 82       	st	Z, r1
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	90 93 31 03 	sts	0x0331, r25
     e50:	80 93 30 03 	sts	0x0330, r24
	serial_tx_string(tx);
     e54:	80 e9       	ldi	r24, 0x90	; 144
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 5e 01 	call	0x2bc	; 0x2bc <serial_tx_string>
}
     e5c:	08 95       	ret

00000e5e <nmea_tx_append_ushort>:
	tx[tx_len++] = ',';
}
/***************************************************************************/
void nmea_tx_append_ushort(unsigned short val)
{
	itoa (val, tx+tx_len, 10);
     e5e:	60 91 30 03 	lds	r22, 0x0330
     e62:	70 91 31 03 	lds	r23, 0x0331
     e66:	60 57       	subi	r22, 0x70	; 112
     e68:	7d 4f       	sbci	r23, 0xFD	; 253
     e6a:	4a e0       	ldi	r20, 0x0A	; 10
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	0e 94 22 09 	call	0x1244	; 0x1244 <itoa>
     e72:	20 91 30 03 	lds	r18, 0x0330
     e76:	30 91 31 03 	lds	r19, 0x0331
     e7a:	f9 01       	movw	r30, r18
     e7c:	e0 57       	subi	r30, 0x70	; 112
     e7e:	fd 4f       	sbci	r31, 0xFD	; 253
     e80:	a9 01       	movw	r20, r18
	while (tx[tx_len] != 0)
     e82:	81 91       	ld	r24, Z+
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	88 23       	and	r24, r24
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <nmea_tx_append_ushort+0x22>
		tx_len++;

	tx[tx_len++] = ',';
     e8c:	fa 01       	movw	r30, r20
     e8e:	e0 57       	subi	r30, 0x70	; 112
     e90:	fd 4f       	sbci	r31, 0xFD	; 253
     e92:	8c e2       	ldi	r24, 0x2C	; 44
     e94:	80 83       	st	Z, r24
     e96:	30 93 31 03 	sts	0x0331, r19
     e9a:	20 93 30 03 	sts	0x0330, r18
}
     e9e:	08 95       	ret

00000ea0 <nmea_tx_append_short>:
	}
}
/***************************************************************************/
void nmea_tx_append_short(short val)
{
	itoa (val, tx+tx_len, 10);
     ea0:	60 91 30 03 	lds	r22, 0x0330
     ea4:	70 91 31 03 	lds	r23, 0x0331
     ea8:	60 57       	subi	r22, 0x70	; 112
     eaa:	7d 4f       	sbci	r23, 0xFD	; 253
     eac:	4a e0       	ldi	r20, 0x0A	; 10
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 22 09 	call	0x1244	; 0x1244 <itoa>
     eb4:	20 91 30 03 	lds	r18, 0x0330
     eb8:	30 91 31 03 	lds	r19, 0x0331
     ebc:	f9 01       	movw	r30, r18
     ebe:	e0 57       	subi	r30, 0x70	; 112
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	a9 01       	movw	r20, r18
	while (tx[tx_len] != 0)
     ec4:	81 91       	ld	r24, Z+
     ec6:	2f 5f       	subi	r18, 0xFF	; 255
     ec8:	3f 4f       	sbci	r19, 0xFF	; 255
     eca:	88 23       	and	r24, r24
     ecc:	d1 f7       	brne	.-12     	; 0xec2 <nmea_tx_append_short+0x22>
		tx_len++;

	tx[tx_len++] = ',';
     ece:	fa 01       	movw	r30, r20
     ed0:	e0 57       	subi	r30, 0x70	; 112
     ed2:	fd 4f       	sbci	r31, 0xFD	; 253
     ed4:	8c e2       	ldi	r24, 0x2C	; 44
     ed6:	80 83       	st	Z, r24
     ed8:	30 93 31 03 	sts	0x0331, r19
     edc:	20 93 30 03 	sts	0x0330, r18
}
     ee0:	08 95       	ret

00000ee2 <nmea_rx_update>:
		serial_tx (10);		
	} 
}

void nmea_rx_update(void)
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
				{
					nmea_err++; 
/* tx_inbuf(); */
				}
			}
			rx_len = -1; /* waiting for next start of message */
     ee6:	cf ef       	ldi	r28, 0xFF	; 255
     ee8:	df ef       	ldi	r29, 0xFF	; 255
     eea:	98 c0       	rjmp	.+304    	; 0x101c <nmea_rx_update+0x13a>
void nmea_rx_update(void)
{
	/* update nmea buffer */
	while (serial_rx_avail())
	{
		char c = serial_rx();
     eec:	0e 94 a6 01 	call	0x34c	; 0x34c <serial_rx>
     ef0:	28 2f       	mov	r18, r24
		if (c=='$') { /* start of message */
     ef2:	84 32       	cpi	r24, 0x24	; 36
     ef4:	a9 f4       	brne	.+42     	; 0xf20 <nmea_rx_update+0x3e>
			if (rx_len != -1) {
     ef6:	80 91 32 03 	lds	r24, 0x0332
     efa:	90 91 33 03 	lds	r25, 0x0333
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	49 f0       	breq	.+18     	; 0xf16 <nmea_rx_update+0x34>
				nmea_err++;
     f04:	80 91 8e 02 	lds	r24, 0x028E
     f08:	90 91 8f 02 	lds	r25, 0x028F
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	90 93 8f 02 	sts	0x028F, r25
     f12:	80 93 8e 02 	sts	0x028E, r24
			}
			rx_len = 0;
     f16:	10 92 33 03 	sts	0x0333, r1
     f1a:	10 92 32 03 	sts	0x0332, r1
     f1e:	7e c0       	rjmp	.+252    	; 0x101c <nmea_rx_update+0x13a>
		}
		else if (c==CHAR_CR || c==CHAR_LF) /* end of message */
     f20:	8d 30       	cpi	r24, 0x0D	; 13
     f22:	19 f0       	breq	.+6      	; 0xf2a <nmea_rx_update+0x48>
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	09 f0       	breq	.+2      	; 0xf2a <nmea_rx_update+0x48>
     f28:	58 c0       	rjmp	.+176    	; 0xfda <nmea_rx_update+0xf8>
		{
			if (rx_len >= 4) {
     f2a:	a0 91 32 03 	lds	r26, 0x0332
     f2e:	b0 91 33 03 	lds	r27, 0x0333
     f32:	a4 30       	cpi	r26, 0x04	; 4
     f34:	b1 05       	cpc	r27, r1
     f36:	0c f4       	brge	.+2      	; 0xf3a <nmea_rx_update+0x58>
     f38:	4b c0       	rjmp	.+150    	; 0xfd0 <nmea_rx_update+0xee>
	short i;

	/* assume that $, CR and LF are not present the buffer */
	
	/* check if a checksum is present */
	if (rx_len >= 9 && rx[rx_len-3] == '*') /* contains at least "$XXXXX,*HH" */
     f3a:	a9 30       	cpi	r26, 0x09	; 9
     f3c:	b1 05       	cpc	r27, r1
     f3e:	ec f1       	brlt	.+122    	; 0xfba <nmea_rx_update+0xd8>
     f40:	fd 01       	movw	r30, r26
     f42:	e7 51       	subi	r30, 0x17	; 23
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	80 81       	ld	r24, Z
     f48:	8a 32       	cpi	r24, 0x2A	; 42
     f4a:	09 f0       	breq	.+2      	; 0xf4e <nmea_rx_update+0x6c>
     f4c:	6d c0       	rjmp	.+218    	; 0x1028 <nmea_rx_update+0x146>
     f4e:	ec ee       	ldi	r30, 0xEC	; 236
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* calculate the checksum */
		for (i=0; i<rx_len-3; i++)
     f54:	9d 01       	movw	r18, r26
     f56:	27 51       	subi	r18, 0x17	; 23
     f58:	3e 4f       	sbci	r19, 0xFE	; 254
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <nmea_rx_update+0x7e>
			cs_calc ^= rx[i];
     f5c:	81 91       	ld	r24, Z+
     f5e:	98 27       	eor	r25, r24
	
	/* check if a checksum is present */
	if (rx_len >= 9 && rx[rx_len-3] == '*') /* contains at least "$XXXXX,*HH" */
	{
		/* calculate the checksum */
		for (i=0; i<rx_len-3; i++)
     f60:	e2 17       	cp	r30, r18
     f62:	f3 07       	cpc	r31, r19
     f64:	d9 f7       	brne	.-10     	; 0xf5c <nmea_rx_update+0x7a>
			cs_calc ^= rx[i];

		/* retrieve the checksum */
		cs_recv = hexval (rx[rx_len-2]) << 4 | hexval (rx[rx_len-1]);
     f66:	fd 01       	movw	r30, r26
     f68:	e6 51       	subi	r30, 0x16	; 22
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	e0 81       	ld	r30, Z
}
/***************************************************************************/
static unsigned char hexval (char c)
{
	unsigned char v = 0;
	if (c <= '9')
     f6e:	ea 33       	cpi	r30, 0x3A	; 58
     f70:	18 f4       	brcc	.+6      	; 0xf78 <nmea_rx_update+0x96>
		v = c-'0';
     f72:	8e 2f       	mov	r24, r30
     f74:	80 53       	subi	r24, 0x30	; 48
     f76:	0b c0       	rjmp	.+22     	; 0xf8e <nmea_rx_update+0xac>
	else if (c <= 'F')
     f78:	e7 34       	cpi	r30, 0x47	; 71
     f7a:	18 f4       	brcc	.+6      	; 0xf82 <nmea_rx_update+0xa0>
		v = c+10-'A';
     f7c:	8e 2f       	mov	r24, r30
     f7e:	87 53       	subi	r24, 0x37	; 55
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <nmea_rx_update+0xac>
	else if (c <= 'f')
     f82:	e7 36       	cpi	r30, 0x67	; 103
     f84:	10 f0       	brcs	.+4      	; 0xf8a <nmea_rx_update+0xa8>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <nmea_rx_update+0xac>
		v = c+10-'a';
     f8a:	8e 2f       	mov	r24, r30
     f8c:	87 55       	subi	r24, 0x57	; 87
		/* calculate the checksum */
		for (i=0; i<rx_len-3; i++)
			cs_calc ^= rx[i];

		/* retrieve the checksum */
		cs_recv = hexval (rx[rx_len-2]) << 4 | hexval (rx[rx_len-1]);
     f8e:	a5 51       	subi	r26, 0x15	; 21
     f90:	be 4f       	sbci	r27, 0xFE	; 254
     f92:	ec 91       	ld	r30, X
}
/***************************************************************************/
static unsigned char hexval (char c)
{
	unsigned char v = 0;
	if (c <= '9')
     f94:	ea 33       	cpi	r30, 0x3A	; 58
     f96:	10 f4       	brcc	.+4      	; 0xf9c <nmea_rx_update+0xba>
		v = c-'0';
     f98:	e0 53       	subi	r30, 0x30	; 48
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <nmea_rx_update+0xcc>
	else if (c <= 'F')
     f9c:	e7 34       	cpi	r30, 0x47	; 71
     f9e:	10 f4       	brcc	.+4      	; 0xfa4 <nmea_rx_update+0xc2>
		v = c+10-'A';
     fa0:	e7 53       	subi	r30, 0x37	; 55
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <nmea_rx_update+0xcc>
	else if (c <= 'f')
     fa4:	e7 36       	cpi	r30, 0x67	; 103
     fa6:	10 f0       	brcs	.+4      	; 0xfac <nmea_rx_update+0xca>
     fa8:	e0 e0       	ldi	r30, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <nmea_rx_update+0xcc>
		v = c+10-'a';
     fac:	e7 55       	subi	r30, 0x57	; 87
		for (i=0; i<rx_len-3; i++)
			cs_calc ^= rx[i];

		/* retrieve the checksum */
		cs_recv = hexval (rx[rx_len-2]) << 4 | hexval (rx[rx_len-1]);
		if (cs_calc == cs_recv)
     fae:	82 95       	swap	r24
     fb0:	80 7f       	andi	r24, 0xF0	; 240
     fb2:	8e 2b       	or	r24, r30
     fb4:	98 17       	cp	r25, r24
     fb6:	19 f4       	brne	.+6      	; 0xfbe <nmea_rx_update+0xdc>
     fb8:	37 c0       	rjmp	.+110    	; 0x1028 <nmea_rx_update+0x146>
			csok = 1;
	}
	/* no checksum */
	else if (rx_len >= 6) /* contains at least "$XXXXX," */
     fba:	16 97       	sbiw	r26, 0x06	; 6
     fbc:	ac f5       	brge	.+106    	; 0x1028 <nmea_rx_update+0x146>
			if (rx_len >= 4) {
				if (nmea_rx_validate())
					nmea_rx_parse();
				else
				{
					nmea_err++; 
     fbe:	80 91 8e 02 	lds	r24, 0x028E
     fc2:	90 91 8f 02 	lds	r25, 0x028F
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 8f 02 	sts	0x028F, r25
     fcc:	80 93 8e 02 	sts	0x028E, r24
/* tx_inbuf(); */
				}
			}
			rx_len = -1; /* waiting for next start of message */
     fd0:	d0 93 33 03 	sts	0x0333, r29
     fd4:	c0 93 32 03 	sts	0x0332, r28
     fd8:	21 c0       	rjmp	.+66     	; 0x101c <nmea_rx_update+0x13a>
		}
		else if (rx_len != -1) {
     fda:	80 91 32 03 	lds	r24, 0x0332
     fde:	90 91 33 03 	lds	r25, 0x0333
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	93 07       	cpc	r25, r19
     fe8:	c9 f0       	breq	.+50     	; 0x101c <nmea_rx_update+0x13a>
			/* copy anything but $ and CR LF to the buffer */
			rx[rx_len++] = c;
     fea:	fc 01       	movw	r30, r24
     fec:	e4 51       	subi	r30, 0x14	; 20
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	20 83       	st	Z, r18
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	90 93 33 03 	sts	0x0333, r25
     ff8:	80 93 32 03 	sts	0x0332, r24
			if (rx_len == RXBUF_SIZE) { /* buffer overflow error */
     ffc:	80 3a       	cpi	r24, 0xA0	; 160
     ffe:	91 05       	cpc	r25, r1
    1000:	69 f4       	brne	.+26     	; 0x101c <nmea_rx_update+0x13a>
				rx_len = -1; /* waiting for next start of message */
    1002:	d0 93 33 03 	sts	0x0333, r29
    1006:	c0 93 32 03 	sts	0x0332, r28
				nmea_err++;
    100a:	80 91 8e 02 	lds	r24, 0x028E
    100e:	90 91 8f 02 	lds	r25, 0x028F
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	90 93 8f 02 	sts	0x028F, r25
    1018:	80 93 8e 02 	sts	0x028E, r24
}

void nmea_rx_update(void)
{
	/* update nmea buffer */
	while (serial_rx_avail())
    101c:	0e 94 97 01 	call	0x32e	; 0x32e <serial_rx_avail>
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <nmea_rx_update+0x144>
    1024:	63 cf       	rjmp	.-314    	; 0xeec <nmea_rx_update+0xa>
    1026:	03 c0       	rjmp	.+6      	; 0x102e <nmea_rx_update+0x14c>
		}
		else if (c==CHAR_CR || c==CHAR_LF) /* end of message */
		{
			if (rx_len >= 4) {
				if (nmea_rx_validate())
					nmea_rx_parse();
    1028:	0e 94 9a 05 	call	0xb34	; 0xb34 <nmea_rx_parse>
    102c:	d1 cf       	rjmp	.-94     	; 0xfd0 <nmea_rx_update+0xee>
				rx_len = -1; /* waiting for next start of message */
				nmea_err++;
			}
		}
	}
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <tx_inbuf>:
	}
	return val;
}
/***************************************************************************/
void tx_inbuf(void)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	if (rx_len > 0)
    1038:	80 91 32 03 	lds	r24, 0x0332
    103c:	90 91 33 03 	lds	r25, 0x0333
    1040:	18 16       	cp	r1, r24
    1042:	19 06       	cpc	r1, r25
    1044:	64 f5       	brge	.+88     	; 0x109e <tx_inbuf+0x6a>
	{
		short i;
		serial_tx ('$');		
    1046:	84 e2       	ldi	r24, 0x24	; 36
    1048:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
    104c:	85 e4       	ldi	r24, 0x45	; 69
    104e:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
    1052:	85 e4       	ldi	r24, 0x45	; 69
    1054:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
    1058:	85 e4       	ldi	r24, 0x45	; 69
    105a:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
    105e:	85 e4       	ldi	r24, 0x45	; 69
    1060:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
    1064:	85 e4       	ldi	r24, 0x45	; 69
    1066:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx (',');		
    106a:	8c e2       	ldi	r24, 0x2C	; 44
    106c:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
    1070:	c0 e0       	ldi	r28, 0x00	; 0
    1072:	d0 e0       	ldi	r29, 0x00	; 0
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <tx_inbuf+0x50>
		for (i=0; i< rx_len; i++)
			serial_tx (rx[i]);		
    1076:	fe 01       	movw	r30, r28
    1078:	e4 51       	subi	r30, 0x14	; 20
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx ('E');		
		serial_tx ('E');		
		serial_tx ('E');		
		serial_tx ('E');		
		serial_tx (',');		
		for (i=0; i< rx_len; i++)
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	80 91 32 03 	lds	r24, 0x0332
    1088:	90 91 33 03 	lds	r25, 0x0333
    108c:	c8 17       	cp	r28, r24
    108e:	d9 07       	cpc	r29, r25
    1090:	94 f3       	brlt	.-28     	; 0x1076 <tx_inbuf+0x42>
			serial_tx (rx[i]);		
		serial_tx (13);		
    1092:	8d e0       	ldi	r24, 0x0D	; 13
    1094:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
		serial_tx (10);		
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
	} 
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <nmea_reset>:
short nmea_err;

/***************************************************************************/
void nmea_reset(void)
{
	rx_len = -1; /* wait for next $ */
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	90 93 33 03 	sts	0x0333, r25
    10ac:	80 93 32 03 	sts	0x0332, r24
	nmea_err = 0; /* reset serial error flag */
    10b0:	10 92 8f 02 	sts	0x028F, r1
    10b4:	10 92 8e 02 	sts	0x028E, r1
	serial_tx (13);		
    10b8:	8d e0       	ldi	r24, 0x0D	; 13
    10ba:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
	serial_tx (10);		
    10be:	8a e0       	ldi	r24, 0x0A	; 10
    10c0:	0e 94 30 01 	call	0x260	; 0x260 <serial_tx>
}
    10c4:	08 95       	ret

000010c6 <nmea_rx_next_val>:
		csok = 1;
	return (csok);
}
/***************************************************************************/
short nmea_rx_next_val(void)
{
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
	short val = 0;
	if (rx[rx_ite] == ',' && rx[rx_ite+1] != ',')
    10d0:	20 91 8c 02 	lds	r18, 0x028C
    10d4:	30 91 8d 02 	lds	r19, 0x028D
    10d8:	f9 01       	movw	r30, r18
    10da:	e4 51       	subi	r30, 0x14	; 20
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	80 81       	ld	r24, Z
    10e0:	8c 32       	cpi	r24, 0x2C	; 44
    10e2:	a1 f5       	brne	.+104    	; 0x114c <__stack+0x4d>
    10e4:	e9 01       	movw	r28, r18
    10e6:	21 96       	adiw	r28, 0x01	; 1
    10e8:	fe 01       	movw	r30, r28
    10ea:	e4 51       	subi	r30, 0x14	; 20
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	80 81       	ld	r24, Z
    10f0:	8c 32       	cpi	r24, 0x2C	; 44
    10f2:	61 f1       	breq	.+88     	; 0x114c <__stack+0x4d>
	{
		short i = rx_ite+1;
		char tmp;
		while (i < rx_len && rx[i] != ',' && rx[i] != '*')
    10f4:	40 91 32 03 	lds	r20, 0x0332
    10f8:	50 91 33 03 	lds	r21, 0x0333
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <__stack+0x1>
			i++;
    10fe:	21 96       	adiw	r28, 0x01	; 1
	short val = 0;
	if (rx[rx_ite] == ',' && rx[rx_ite+1] != ',')
	{
		short i = rx_ite+1;
		char tmp;
		while (i < rx_len && rx[i] != ',' && rx[i] != '*')
    1100:	c4 17       	cp	r28, r20
    1102:	d5 07       	cpc	r29, r21
    1104:	34 f4       	brge	.+12     	; 0x1112 <__stack+0x13>
    1106:	80 81       	ld	r24, Z
    1108:	8c 32       	cpi	r24, 0x2C	; 44
    110a:	19 f0       	breq	.+6      	; 0x1112 <__stack+0x13>
    110c:	31 96       	adiw	r30, 0x01	; 1
    110e:	8a 32       	cpi	r24, 0x2A	; 42
    1110:	b1 f7       	brne	.-20     	; 0x10fe <nmea_rx_next_val+0x38>
			i++;
		tmp = rx[i];
    1112:	8e 01       	movw	r16, r28
    1114:	04 51       	subi	r16, 0x14	; 20
    1116:	1e 4f       	sbci	r17, 0xFE	; 254
    1118:	f8 01       	movw	r30, r16
    111a:	f0 80       	ld	r15, Z
		rx[i] = 0;
    111c:	10 82       	st	Z, r1
		val = atoi (rx+rx_ite+1);
    111e:	c9 01       	movw	r24, r18
    1120:	83 51       	subi	r24, 0x13	; 19
    1122:	9e 4f       	sbci	r25, 0xFE	; 254
    1124:	0e 94 04 09 	call	0x1208	; 0x1208 <atoi>
    1128:	9c 01       	movw	r18, r24
		rx[i] = tmp;
    112a:	f8 01       	movw	r30, r16
    112c:	f0 82       	st	Z, r15
		if (tmp == ',')
    112e:	fc e2       	ldi	r31, 0x2C	; 44
    1130:	ff 16       	cp	r15, r31
    1132:	29 f4       	brne	.+10     	; 0x113e <__stack+0x3f>
			rx_ite = i;
    1134:	d0 93 8d 02 	sts	0x028D, r29
    1138:	c0 93 8c 02 	sts	0x028C, r28
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <__stack+0x51>
		else
			rx_ite = -1;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	90 93 8d 02 	sts	0x028D, r25
    1146:	80 93 8c 02 	sts	0x028C, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <__stack+0x51>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return val;
}
    1150:	c9 01       	movw	r24, r18
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	08 95       	ret

0000115e <__mulsi3>:
    115e:	62 9f       	mul	r22, r18
    1160:	d0 01       	movw	r26, r0
    1162:	73 9f       	mul	r23, r19
    1164:	f0 01       	movw	r30, r0
    1166:	82 9f       	mul	r24, r18
    1168:	e0 0d       	add	r30, r0
    116a:	f1 1d       	adc	r31, r1
    116c:	64 9f       	mul	r22, r20
    116e:	e0 0d       	add	r30, r0
    1170:	f1 1d       	adc	r31, r1
    1172:	92 9f       	mul	r25, r18
    1174:	f0 0d       	add	r31, r0
    1176:	83 9f       	mul	r24, r19
    1178:	f0 0d       	add	r31, r0
    117a:	74 9f       	mul	r23, r20
    117c:	f0 0d       	add	r31, r0
    117e:	65 9f       	mul	r22, r21
    1180:	f0 0d       	add	r31, r0
    1182:	99 27       	eor	r25, r25
    1184:	72 9f       	mul	r23, r18
    1186:	b0 0d       	add	r27, r0
    1188:	e1 1d       	adc	r30, r1
    118a:	f9 1f       	adc	r31, r25
    118c:	63 9f       	mul	r22, r19
    118e:	b0 0d       	add	r27, r0
    1190:	e1 1d       	adc	r30, r1
    1192:	f9 1f       	adc	r31, r25
    1194:	bd 01       	movw	r22, r26
    1196:	cf 01       	movw	r24, r30
    1198:	11 24       	eor	r1, r1
    119a:	08 95       	ret

0000119c <__udivmodhi4>:
    119c:	aa 1b       	sub	r26, r26
    119e:	bb 1b       	sub	r27, r27
    11a0:	51 e1       	ldi	r21, 0x11	; 17
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <__udivmodhi4_ep>

000011a4 <__udivmodhi4_loop>:
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	a6 17       	cp	r26, r22
    11aa:	b7 07       	cpc	r27, r23
    11ac:	10 f0       	brcs	.+4      	; 0x11b2 <__udivmodhi4_ep>
    11ae:	a6 1b       	sub	r26, r22
    11b0:	b7 0b       	sbc	r27, r23

000011b2 <__udivmodhi4_ep>:
    11b2:	88 1f       	adc	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	5a 95       	dec	r21
    11b8:	a9 f7       	brne	.-22     	; 0x11a4 <__udivmodhi4_loop>
    11ba:	80 95       	com	r24
    11bc:	90 95       	com	r25
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	08 95       	ret

000011c4 <__udivmodsi4>:
    11c4:	a1 e2       	ldi	r26, 0x21	; 33
    11c6:	1a 2e       	mov	r1, r26
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	fd 01       	movw	r30, r26
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <__udivmodsi4_ep>

000011d0 <__udivmodsi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	ee 1f       	adc	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	a2 17       	cp	r26, r18
    11da:	b3 07       	cpc	r27, r19
    11dc:	e4 07       	cpc	r30, r20
    11de:	f5 07       	cpc	r31, r21
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__udivmodsi4_ep>
    11e2:	a2 1b       	sub	r26, r18
    11e4:	b3 0b       	sbc	r27, r19
    11e6:	e4 0b       	sbc	r30, r20
    11e8:	f5 0b       	sbc	r31, r21

000011ea <__udivmodsi4_ep>:
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	1a 94       	dec	r1
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <__udivmodsi4_loop>
    11f6:	60 95       	com	r22
    11f8:	70 95       	com	r23
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	bd 01       	movw	r22, r26
    1204:	cf 01       	movw	r24, r30
    1206:	08 95       	ret

00001208 <atoi>:
    1208:	fc 01       	movw	r30, r24
    120a:	88 27       	eor	r24, r24
    120c:	99 27       	eor	r25, r25
    120e:	e8 94       	clt
    1210:	21 91       	ld	r18, Z+
    1212:	20 32       	cpi	r18, 0x20	; 32
    1214:	e9 f3       	breq	.-6      	; 0x1210 <atoi+0x8>
    1216:	29 30       	cpi	r18, 0x09	; 9
    1218:	10 f0       	brcs	.+4      	; 0x121e <atoi+0x16>
    121a:	2e 30       	cpi	r18, 0x0E	; 14
    121c:	c8 f3       	brcs	.-14     	; 0x1210 <atoi+0x8>
    121e:	2b 32       	cpi	r18, 0x2B	; 43
    1220:	41 f0       	breq	.+16     	; 0x1232 <atoi+0x2a>
    1222:	2d 32       	cpi	r18, 0x2D	; 45
    1224:	39 f4       	brne	.+14     	; 0x1234 <atoi+0x2c>
    1226:	68 94       	set
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <atoi+0x2a>
    122a:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulhi_const_10>
    122e:	82 0f       	add	r24, r18
    1230:	91 1d       	adc	r25, r1
    1232:	21 91       	ld	r18, Z+
    1234:	20 53       	subi	r18, 0x30	; 48
    1236:	2a 30       	cpi	r18, 0x0A	; 10
    1238:	c0 f3       	brcs	.-16     	; 0x122a <atoi+0x22>
    123a:	1e f4       	brtc	.+6      	; 0x1242 <atoi+0x3a>
    123c:	90 95       	com	r25
    123e:	81 95       	neg	r24
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <itoa>:
    1244:	fb 01       	movw	r30, r22
    1246:	9f 01       	movw	r18, r30
    1248:	e8 94       	clt
    124a:	42 30       	cpi	r20, 0x02	; 2
    124c:	c4 f0       	brlt	.+48     	; 0x127e <itoa+0x3a>
    124e:	45 32       	cpi	r20, 0x25	; 37
    1250:	b4 f4       	brge	.+44     	; 0x127e <itoa+0x3a>
    1252:	4a 30       	cpi	r20, 0x0A	; 10
    1254:	29 f4       	brne	.+10     	; 0x1260 <itoa+0x1c>
    1256:	97 fb       	bst	r25, 7
    1258:	1e f4       	brtc	.+6      	; 0x1260 <itoa+0x1c>
    125a:	90 95       	com	r25
    125c:	81 95       	neg	r24
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	64 2f       	mov	r22, r20
    1262:	77 27       	eor	r23, r23
    1264:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
    1268:	80 5d       	subi	r24, 0xD0	; 208
    126a:	8a 33       	cpi	r24, 0x3A	; 58
    126c:	0c f0       	brlt	.+2      	; 0x1270 <itoa+0x2c>
    126e:	89 5d       	subi	r24, 0xD9	; 217
    1270:	81 93       	st	Z+, r24
    1272:	cb 01       	movw	r24, r22
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	a1 f7       	brne	.-24     	; 0x1260 <itoa+0x1c>
    1278:	16 f4       	brtc	.+4      	; 0x127e <itoa+0x3a>
    127a:	5d e2       	ldi	r21, 0x2D	; 45
    127c:	51 93       	st	Z+, r21
    127e:	10 82       	st	Z, r1
    1280:	c9 01       	movw	r24, r18
    1282:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <strrev>

00001286 <__mulhi_const_10>:
    1286:	7a e0       	ldi	r23, 0x0A	; 10
    1288:	97 9f       	mul	r25, r23
    128a:	90 2d       	mov	r25, r0
    128c:	87 9f       	mul	r24, r23
    128e:	80 2d       	mov	r24, r0
    1290:	91 0d       	add	r25, r1
    1292:	11 24       	eor	r1, r1
    1294:	08 95       	ret

00001296 <utoa>:
    1296:	fb 01       	movw	r30, r22
    1298:	9f 01       	movw	r18, r30
    129a:	42 30       	cpi	r20, 0x02	; 2
    129c:	74 f0       	brlt	.+28     	; 0x12ba <utoa+0x24>
    129e:	45 32       	cpi	r20, 0x25	; 37
    12a0:	64 f4       	brge	.+24     	; 0x12ba <utoa+0x24>
    12a2:	64 2f       	mov	r22, r20
    12a4:	77 27       	eor	r23, r23
    12a6:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
    12aa:	80 5d       	subi	r24, 0xD0	; 208
    12ac:	8a 33       	cpi	r24, 0x3A	; 58
    12ae:	0c f0       	brlt	.+2      	; 0x12b2 <utoa+0x1c>
    12b0:	89 5d       	subi	r24, 0xD9	; 217
    12b2:	81 93       	st	Z+, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	a1 f7       	brne	.-24     	; 0x12a2 <utoa+0xc>
    12ba:	10 82       	st	Z, r1
    12bc:	c9 01       	movw	r24, r18
    12be:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <strrev>

000012c2 <strrev>:
    12c2:	dc 01       	movw	r26, r24
    12c4:	fc 01       	movw	r30, r24
    12c6:	67 2f       	mov	r22, r23
    12c8:	71 91       	ld	r23, Z+
    12ca:	77 23       	and	r23, r23
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <strrev+0x4>
    12ce:	32 97       	sbiw	r30, 0x02	; 2
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <strrev+0x18>
    12d2:	7c 91       	ld	r23, X
    12d4:	6d 93       	st	X+, r22
    12d6:	70 83       	st	Z, r23
    12d8:	62 91       	ld	r22, -Z
    12da:	ae 17       	cp	r26, r30
    12dc:	bf 07       	cpc	r27, r31
    12de:	c8 f3       	brcs	.-14     	; 0x12d2 <strrev+0x10>
    12e0:	08 95       	ret

000012e2 <_exit>:
    12e2:	f8 94       	cli

000012e4 <__stop_program>:
    12e4:	ff cf       	rjmp	.-2      	; 0x12e4 <__stop_program>
